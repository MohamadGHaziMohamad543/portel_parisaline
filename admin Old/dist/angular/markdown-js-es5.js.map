{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/markdown/markdown.js"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    comments: {\r\n        blockComment: ['<!--', '-->',]\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '<', close: '>', notIn: ['string'] }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '(', close: ')' },\r\n        { open: '[', close: ']' },\r\n        { open: '`', close: '`' },\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp(\"^\\\\s*<!--\\\\s*#?region\\\\b.*-->\"),\r\n            end: new RegExp(\"^\\\\s*<!--\\\\s*#?endregion\\\\b.*-->\")\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.md',\r\n    // escape codes\r\n    control: /[\\\\`*_\\[\\]{}()#+\\-\\.!]/,\r\n    noncontrol: /[^\\\\`*_\\[\\]{}()#+\\-\\.!]/,\r\n    escapes: /\\\\(?:@control)/,\r\n    // escape codes for javascript/CSS strings\r\n    jsescapes: /\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,\r\n    // non matched elements\r\n    empty: [\r\n        'area', 'base', 'basefont', 'br', 'col', 'frame',\r\n        'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param'\r\n    ],\r\n    tokenizer: {\r\n        root: [\r\n            // markdown tables\r\n            [/^\\s*\\|/, '@rematch', '@table_header'],\r\n            // headers (with #)\r\n            [/^(\\s{0,3})(#+)((?:[^\\\\#]|@escapes)+)((?:#+)?)/, ['white', 'keyword', 'keyword', 'keyword']],\r\n            // headers (with =)\r\n            [/^\\s*(=+|\\-+)\\s*$/, 'keyword'],\r\n            // headers (with ***)\r\n            [/^\\s*((\\*[ ]?)+)\\s*$/, 'meta.separator'],\r\n            // quote\r\n            [/^\\s*>+/, 'comment'],\r\n            // list (starting with * or number)\r\n            [/^\\s*([\\*\\-+:]|\\d+\\.)\\s/, 'keyword'],\r\n            // code block (4 spaces indent)\r\n            [/^(\\t|[ ]{4})[^ ].*$/, 'string'],\r\n            // code block (3 tilde)\r\n            [/^\\s*~~~\\s*((?:\\w|[\\/\\-#])+)?\\s*$/, { token: 'string', next: '@codeblock' }],\r\n            // github style code blocks (with backticks and language)\r\n            [/^\\s*```\\s*((?:\\w|[\\/\\-#])+).*$/, { token: 'string', next: '@codeblockgh', nextEmbedded: '$1' }],\r\n            // github style code blocks (with backticks but no language)\r\n            [/^\\s*```\\s*$/, { token: 'string', next: '@codeblock' }],\r\n            // markup within lines\r\n            { include: '@linecontent' },\r\n        ],\r\n        table_header: [\r\n            { include: '@table_common' },\r\n            [/[^\\|]+/, 'keyword.table.header'],\r\n        ],\r\n        table_body: [\r\n            { include: '@table_common' },\r\n            { include: '@linecontent' },\r\n        ],\r\n        table_common: [\r\n            [/\\s*[\\-:]+\\s*/, { token: 'keyword', switchTo: 'table_body' }],\r\n            [/^\\s*\\|/, 'keyword.table.left'],\r\n            [/^\\s*[^\\|]/, '@rematch', '@pop'],\r\n            [/^\\s*$/, '@rematch', '@pop'],\r\n            [/\\|/, {\r\n                    cases: {\r\n                        '@eos': 'keyword.table.right',\r\n                        '@default': 'keyword.table.middle',\r\n                    }\r\n                }],\r\n        ],\r\n        codeblock: [\r\n            [/^\\s*~~~\\s*$/, { token: 'string', next: '@pop' }],\r\n            [/^\\s*```\\s*$/, { token: 'string', next: '@pop' }],\r\n            [/.*$/, 'variable.source'],\r\n        ],\r\n        // github style code blocks\r\n        codeblockgh: [\r\n            [/```\\s*$/, { token: 'variable.source', next: '@pop', nextEmbedded: '@pop' }],\r\n            [/[^`]+/, 'variable.source'],\r\n        ],\r\n        linecontent: [\r\n            // escapes\r\n            [/&\\w+;/, 'string.escape'],\r\n            [/@escapes/, 'escape'],\r\n            // various markup\r\n            [/\\b__([^\\\\_]|@escapes|_(?!_))+__\\b/, 'strong'],\r\n            [/\\*\\*([^\\\\*]|@escapes|\\*(?!\\*))+\\*\\*/, 'strong'],\r\n            [/\\b_[^_]+_\\b/, 'emphasis'],\r\n            [/\\*([^\\\\*]|@escapes)+\\*/, 'emphasis'],\r\n            [/`([^\\\\`]|@escapes)+`/, 'variable'],\r\n            // links\r\n            [/\\{+[^}]+\\}+/, 'string.target'],\r\n            [/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\]\\([^\\)]+\\))/, ['string.link', '', 'string.link']],\r\n            [/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\])/, 'string.link'],\r\n            // or html\r\n            { include: 'html' },\r\n        ],\r\n        // Note: it is tempting to rather switch to the real HTML mode instead of building our own here\r\n        // but currently there is a limitation in Monarch that prevents us from doing it: The opening\r\n        // '<' would start the HTML mode, however there is no way to jump 1 character back to let the\r\n        // HTML mode also tokenize the opening angle bracket. Thus, even though we could jump to HTML,\r\n        // we cannot correctly tokenize it in that mode yet.\r\n        html: [\r\n            // html tags\r\n            [/<(\\w+)\\/>/, 'tag'],\r\n            [/<(\\w+)/, {\r\n                    cases: {\r\n                        '@empty': { token: 'tag', next: '@tag.$1' },\r\n                        '@default': { token: 'tag', next: '@tag.$1' }\r\n                    }\r\n                }],\r\n            [/<\\/(\\w+)\\s*>/, { token: 'tag' }],\r\n            [/<!--/, 'comment', '@comment']\r\n        ],\r\n        comment: [\r\n            [/[^<\\-]+/, 'comment.content'],\r\n            [/-->/, 'comment', '@pop'],\r\n            [/<!--/, 'comment.content.invalid'],\r\n            [/[<\\-]/, 'comment.content']\r\n        ],\r\n        // Almost full HTML tag matching, complete with embedded scripts & styles\r\n        tag: [\r\n            [/[ \\t\\r\\n]+/, 'white'],\r\n            [/(type)(\\s*=\\s*)(\")([^\"]+)(\")/, ['attribute.name.html', 'delimiter.html', 'string.html',\r\n                    { token: 'string.html', switchTo: '@tag.$S2.$4' },\r\n                    'string.html']],\r\n            [/(type)(\\s*=\\s*)(')([^']+)(')/, ['attribute.name.html', 'delimiter.html', 'string.html',\r\n                    { token: 'string.html', switchTo: '@tag.$S2.$4' },\r\n                    'string.html']],\r\n            [/(\\w+)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/, ['attribute.name.html', 'delimiter.html', 'string.html']],\r\n            [/\\w+/, 'attribute.name.html'],\r\n            [/\\/>/, 'tag', '@pop'],\r\n            [/>/, {\r\n                    cases: {\r\n                        '$S2==style': { token: 'tag', switchTo: 'embeddedStyle', nextEmbedded: 'text/css' },\r\n                        '$S2==script': {\r\n                            cases: {\r\n                                '$S3': { token: 'tag', switchTo: 'embeddedScript', nextEmbedded: '$S3' },\r\n                                '@default': { token: 'tag', switchTo: 'embeddedScript', nextEmbedded: 'text/javascript' }\r\n                            }\r\n                        },\r\n                        '@default': { token: 'tag', next: '@pop' }\r\n                    }\r\n                }],\r\n        ],\r\n        embeddedStyle: [\r\n            [/[^<]+/, ''],\r\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],\r\n            [/</, '']\r\n        ],\r\n        embeddedScript: [\r\n            [/[^<]+/, ''],\r\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],\r\n            [/</, '']\r\n        ],\r\n    }\r\n};\r\n"],"sourceRoot":"webpack:///","file":"markdown-js-es5.js"}