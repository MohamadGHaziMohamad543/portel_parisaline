{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/typescript/typescript.js"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\n// Allow for running under nodejs/requirejs in tests\r\nvar _monaco = (typeof monaco === 'undefined' ? self.monaco : monaco);\r\nexport var conf = {\r\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['/*', '*/']\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    onEnterRules: [\r\n        {\r\n            // e.g. /** | */\r\n            beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\r\n            afterText: /^\\s*\\*\\/$/,\r\n            action: { indentAction: _monaco.languages.IndentAction.IndentOutdent, appendText: ' * ' }\r\n        },\r\n        {\r\n            // e.g. /** ...|\r\n            beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\r\n            action: { indentAction: _monaco.languages.IndentAction.None, appendText: ' * ' }\r\n        },\r\n        {\r\n            // e.g.  * ...|\r\n            beforeText: /^(\\t|(\\ \\ ))*\\ \\*(\\ ([^\\*]|\\*(?!\\/))*)?$/,\r\n            action: { indentAction: _monaco.languages.IndentAction.None, appendText: '* ' }\r\n        },\r\n        {\r\n            // e.g.  */|\r\n            beforeText: /^(\\t|(\\ \\ ))*\\ \\*\\/\\s*$/,\r\n            action: { indentAction: _monaco.languages.IndentAction.None, removeText: 1 }\r\n        }\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"', notIn: ['string'] },\r\n        { open: '\\'', close: '\\'', notIn: ['string', 'comment'] },\r\n        { open: '`', close: '`', notIn: ['string', 'comment'] },\r\n        { open: \"/**\", close: \" */\", notIn: [\"string\"] }\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp(\"^\\\\s*//\\\\s*#?region\\\\b\"),\r\n            end: new RegExp(\"^\\\\s*//\\\\s*#?endregion\\\\b\")\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    // Set defaultToken to invalid to see what you do not tokenize yet\r\n    defaultToken: 'invalid',\r\n    tokenPostfix: '.ts',\r\n    keywords: [\r\n        'abstract', 'as', 'break', 'case', 'catch', 'class', 'continue', 'const',\r\n        'constructor', 'debugger', 'declare', 'default', 'delete', 'do', 'else',\r\n        'enum', 'export', 'extends', 'false', 'finally', 'for', 'from', 'function',\r\n        'get', 'if', 'implements', 'import', 'in', 'infer', 'instanceof', 'interface',\r\n        'is', 'keyof', 'let', 'module', 'namespace', 'never', 'new', 'null', 'package',\r\n        'private', 'protected', 'public', 'readonly', 'require', 'global', 'return',\r\n        'set', 'static', 'super', 'switch', 'symbol', 'this', 'throw', 'true', 'try',\r\n        'type', 'typeof', 'unique', 'var', 'void', 'while', 'with', 'yield', 'async',\r\n        'await', 'of'\r\n    ],\r\n    typeKeywords: [\r\n        'any', 'boolean', 'number', 'object', 'string', 'undefined'\r\n    ],\r\n    operators: [\r\n        '<=', '>=', '==', '!=', '===', '!==', '=>', '+', '-', '**',\r\n        '*', '/', '%', '++', '--', '<<', '</', '>>', '>>>', '&',\r\n        '|', '^', '!', '~', '&&', '||', '??', '?', ':', '=', '+=', '-=',\r\n        '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=', '&=', '|=',\r\n        '^=', '@',\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n    digits: /\\d+(_+\\d+)*/,\r\n    octaldigits: /[0-7]+(_+[0-7]+)*/,\r\n    binarydigits: /[0-1]+(_+[0-1]+)*/,\r\n    hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\r\n    regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\r\n    regexpesc: /\\\\(?:[bBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            [/[{}]/, 'delimiter.bracket'],\r\n            { include: 'common' }\r\n        ],\r\n        common: [\r\n            // identifiers and keywords\r\n            [/[a-z_$][\\w$]*/, {\r\n                    cases: {\r\n                        '@typeKeywords': 'keyword',\r\n                        '@keywords': 'keyword',\r\n                        '@default': 'identifier'\r\n                    }\r\n                }],\r\n            [/[A-Z][\\w\\$]*/, 'type.identifier'],\r\n            // [/[A-Z][\\w\\$]*/, 'identifier'],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // regular expression: ensure it is terminated before beginning (otherwise it is an opeator)\r\n            [/\\/(?=([^\\\\\\/]|\\\\.)+\\/([gimsuy]*)(\\s*)(\\.|;|,|\\)|\\]|\\}|$))/, { token: 'regexp', bracket: '@open', next: '@regexp' }],\r\n            // delimiters and operators\r\n            [/[()\\[\\]]/, '@brackets'],\r\n            [/[<>](?!@symbols)/, '@brackets'],\r\n            [/!(?=([^=]|$))/, 'delimiter'],\r\n            [/@symbols/, {\r\n                    cases: {\r\n                        '@operators': 'delimiter',\r\n                        '@default': ''\r\n                    }\r\n                }],\r\n            // numbers\r\n            [/(@digits)[eE]([\\-+]?(@digits))?/, 'number.float'],\r\n            [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?/, 'number.float'],\r\n            [/0[xX](@hexdigits)n?/, 'number.hex'],\r\n            [/0[oO]?(@octaldigits)n?/, 'number.octal'],\r\n            [/0[bB](@binarydigits)n?/, 'number.binary'],\r\n            [/(@digits)n?/, 'number'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[;,.]/, 'delimiter'],\r\n            // strings\r\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/\"/, 'string', '@string_double'],\r\n            [/'/, 'string', '@string_single'],\r\n            [/`/, 'string', '@string_backtick'],\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@jsdoc'],\r\n            [/\\/\\*/, 'comment', '@comment'],\r\n            [/\\/\\/.*$/, 'comment'],\r\n        ],\r\n        comment: [\r\n            [/[^\\/*]+/, 'comment'],\r\n            [/\\*\\//, 'comment', '@pop'],\r\n            [/[\\/*]/, 'comment']\r\n        ],\r\n        jsdoc: [\r\n            [/[^\\/*]+/, 'comment.doc'],\r\n            [/\\*\\//, 'comment.doc', '@pop'],\r\n            [/[\\/*]/, 'comment.doc']\r\n        ],\r\n        // We match regular expression quite precisely\r\n        regexp: [\r\n            [/(\\{)(\\d+(?:,\\d*)?)(\\})/, ['regexp.escape.control', 'regexp.escape.control', 'regexp.escape.control']],\r\n            [/(\\[)(\\^?)(?=(?:[^\\]\\\\\\/]|\\\\.)+)/, ['regexp.escape.control', { token: 'regexp.escape.control', next: '@regexrange' }]],\r\n            [/(\\()(\\?:|\\?=|\\?!)/, ['regexp.escape.control', 'regexp.escape.control']],\r\n            [/[()]/, 'regexp.escape.control'],\r\n            [/@regexpctl/, 'regexp.escape.control'],\r\n            [/[^\\\\\\/]/, 'regexp'],\r\n            [/@regexpesc/, 'regexp.escape'],\r\n            [/\\\\\\./, 'regexp.invalid'],\r\n            [/(\\/)([gimsuy]*)/, [{ token: 'regexp', bracket: '@close', next: '@pop' }, 'keyword.other']],\r\n        ],\r\n        regexrange: [\r\n            [/-/, 'regexp.escape.control'],\r\n            [/\\^/, 'regexp.invalid'],\r\n            [/@regexpesc/, 'regexp.escape'],\r\n            [/[^\\]]/, 'regexp'],\r\n            [/\\]/, { token: 'regexp.escape.control', next: '@pop', bracket: '@close' }]\r\n        ],\r\n        string_double: [\r\n            [/[^\\\\\"]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/\"/, 'string', '@pop']\r\n        ],\r\n        string_single: [\r\n            [/[^\\\\']+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/'/, 'string', '@pop']\r\n        ],\r\n        string_backtick: [\r\n            [/\\$\\{/, { token: 'delimiter.bracket', next: '@bracketCounting' }],\r\n            [/[^\\\\`$]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/`/, 'string', '@pop']\r\n        ],\r\n        bracketCounting: [\r\n            [/\\{/, 'delimiter.bracket', '@bracketCounting'],\r\n            [/\\}/, 'delimiter.bracket', '@pop'],\r\n            { include: 'common' }\r\n        ],\r\n    },\r\n};\r\n"],"sourceRoot":"webpack:///","file":"common-es5.js"}