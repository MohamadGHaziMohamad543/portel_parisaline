{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/postiats/postiats.js"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Artyom Shalkhakov. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *\r\n *  Based on the ATS/Postiats lexer by Hongwei Xi.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['(*', '*)'],\r\n    },\r\n    brackets: [['{', '}'], ['[', ']'], ['(', ')'], ['<', '>']],\r\n    autoClosingPairs: [\r\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\r\n        { open: '{', close: '}', notIn: ['string', 'comment'] },\r\n        { open: '[', close: ']', notIn: ['string', 'comment'] },\r\n        { open: '(', close: ')', notIn: ['string', 'comment'] },\r\n    ]\r\n};\r\nexport var language = {\r\n    tokenPostfix: '.pats',\r\n    // TODO: staload and dynload are followed by a special kind of string literals\r\n    // with {$IDENTIFER} variables, and it also may make sense to highlight\r\n    // the punctuation (. and / and \\) differently.\r\n    // Set defaultToken to invalid to see what you do not tokenize yet\r\n    defaultToken: 'invalid',\r\n    // keyword reference: https://github.com/githwxi/ATS-Postiats/blob/master/src/pats_lexing_token.dats\r\n    keywords: [\r\n        //\r\n        \"abstype\",\r\n        \"abst0ype\",\r\n        \"absprop\",\r\n        \"absview\",\r\n        \"absvtype\",\r\n        \"absviewtype\",\r\n        \"absvt0ype\",\r\n        \"absviewt0ype\",\r\n        //\r\n        \"as\",\r\n        //\r\n        \"and\",\r\n        //\r\n        \"assume\",\r\n        //\r\n        \"begin\",\r\n        //\r\n        /*\r\n                \"case\", // CASE\r\n        */\r\n        //\r\n        \"classdec\",\r\n        //\r\n        \"datasort\",\r\n        //\r\n        \"datatype\",\r\n        \"dataprop\",\r\n        \"dataview\",\r\n        \"datavtype\",\r\n        \"dataviewtype\",\r\n        //\r\n        \"do\",\r\n        //\r\n        \"end\",\r\n        //\r\n        \"extern\",\r\n        \"extype\",\r\n        \"extvar\",\r\n        //\r\n        \"exception\",\r\n        //\r\n        \"fn\",\r\n        \"fnx\",\r\n        \"fun\",\r\n        //\r\n        \"prfn\",\r\n        \"prfun\",\r\n        //\r\n        \"praxi\",\r\n        \"castfn\",\r\n        //\r\n        \"if\",\r\n        \"then\",\r\n        \"else\",\r\n        //\r\n        \"ifcase\",\r\n        //\r\n        \"in\",\r\n        //\r\n        \"infix\",\r\n        \"infixl\",\r\n        \"infixr\",\r\n        \"prefix\",\r\n        \"postfix\",\r\n        //\r\n        \"implmnt\",\r\n        \"implement\",\r\n        //\r\n        \"primplmnt\",\r\n        \"primplement\",\r\n        //\r\n        \"import\",\r\n        //\r\n        /*\r\n                \"lam\", // LAM\r\n                \"llam\", // LLAM\r\n                \"fix\", // FIX\r\n        */\r\n        //\r\n        \"let\",\r\n        //\r\n        \"local\",\r\n        //\r\n        \"macdef\",\r\n        \"macrodef\",\r\n        //\r\n        \"nonfix\",\r\n        //\r\n        \"symelim\",\r\n        \"symintr\",\r\n        \"overload\",\r\n        //\r\n        \"of\",\r\n        \"op\",\r\n        //\r\n        \"rec\",\r\n        //\r\n        \"sif\",\r\n        \"scase\",\r\n        //\r\n        \"sortdef\",\r\n        /*\r\n        // HX: [sta] is now deprecated\r\n        */\r\n        \"sta\",\r\n        \"stacst\",\r\n        \"stadef\",\r\n        \"static\",\r\n        /*\r\n                \"stavar\", // T_STAVAR\r\n        */\r\n        //\r\n        \"staload\",\r\n        \"dynload\",\r\n        //\r\n        \"try\",\r\n        //\r\n        \"tkindef\",\r\n        //\r\n        /*\r\n                \"type\", // TYPE\r\n        */\r\n        \"typedef\",\r\n        \"propdef\",\r\n        \"viewdef\",\r\n        \"vtypedef\",\r\n        \"viewtypedef\",\r\n        //\r\n        /*\r\n                \"val\", // VAL\r\n        */\r\n        \"prval\",\r\n        //\r\n        \"var\",\r\n        \"prvar\",\r\n        //\r\n        \"when\",\r\n        \"where\",\r\n        //\r\n        /*\r\n                \"for\", // T_FOR\r\n                \"while\", // T_WHILE\r\n        */\r\n        //\r\n        \"with\",\r\n        //\r\n        \"withtype\",\r\n        \"withprop\",\r\n        \"withview\",\r\n        \"withvtype\",\r\n        \"withviewtype\",\r\n    ],\r\n    keywords_dlr: [\r\n        \"$delay\",\r\n        \"$ldelay\",\r\n        //\r\n        \"$arrpsz\",\r\n        \"$arrptrsize\",\r\n        //\r\n        \"$d2ctype\",\r\n        //\r\n        \"$effmask\",\r\n        \"$effmask_ntm\",\r\n        \"$effmask_exn\",\r\n        \"$effmask_ref\",\r\n        \"$effmask_wrt\",\r\n        \"$effmask_all\",\r\n        //\r\n        \"$extern\",\r\n        \"$extkind\",\r\n        \"$extype\",\r\n        \"$extype_struct\",\r\n        //\r\n        \"$extval\",\r\n        \"$extfcall\",\r\n        \"$extmcall\",\r\n        //\r\n        \"$literal\",\r\n        //\r\n        \"$myfilename\",\r\n        \"$mylocation\",\r\n        \"$myfunction\",\r\n        //\r\n        \"$lst\",\r\n        \"$lst_t\",\r\n        \"$lst_vt\",\r\n        \"$list\",\r\n        \"$list_t\",\r\n        \"$list_vt\",\r\n        //\r\n        \"$rec\",\r\n        \"$rec_t\",\r\n        \"$rec_vt\",\r\n        \"$record\",\r\n        \"$record_t\",\r\n        \"$record_vt\",\r\n        //\r\n        \"$tup\",\r\n        \"$tup_t\",\r\n        \"$tup_vt\",\r\n        \"$tuple\",\r\n        \"$tuple_t\",\r\n        \"$tuple_vt\",\r\n        //\r\n        \"$break\",\r\n        \"$continue\",\r\n        //\r\n        \"$raise\",\r\n        //\r\n        \"$showtype\",\r\n        //\r\n        \"$vcopyenv_v\",\r\n        \"$vcopyenv_vt\",\r\n        //\r\n        \"$tempenver\",\r\n        //\r\n        \"$solver_assert\",\r\n        \"$solver_verify\",\r\n    ],\r\n    keywords_srp: [\r\n        //\r\n        \"#if\",\r\n        \"#ifdef\",\r\n        \"#ifndef\",\r\n        //\r\n        \"#then\",\r\n        //\r\n        \"#elif\",\r\n        \"#elifdef\",\r\n        \"#elifndef\",\r\n        //\r\n        \"#else\",\r\n        \"#endif\",\r\n        //\r\n        \"#error\",\r\n        //\r\n        \"#prerr\",\r\n        \"#print\",\r\n        //\r\n        \"#assert\",\r\n        //\r\n        \"#undef\",\r\n        \"#define\",\r\n        //\r\n        \"#include\",\r\n        \"#require\",\r\n        //\r\n        \"#pragma\",\r\n        \"#codegen2\",\r\n        \"#codegen3\",\r\n    ],\r\n    irregular_keyword_list: [\r\n        \"val+\",\r\n        \"val-\",\r\n        \"val\",\r\n        \"case+\",\r\n        \"case-\",\r\n        \"case\",\r\n        \"addr@\",\r\n        \"addr\",\r\n        \"fold@\",\r\n        \"free@\",\r\n        \"fix@\",\r\n        \"fix\",\r\n        \"lam@\",\r\n        \"lam\",\r\n        \"llam@\",\r\n        \"llam\",\r\n        \"viewt@ype+\",\r\n        \"viewt@ype-\",\r\n        \"viewt@ype\",\r\n        \"viewtype+\",\r\n        \"viewtype-\",\r\n        \"viewtype\",\r\n        \"view+\",\r\n        \"view-\",\r\n        \"view@\",\r\n        \"view\",\r\n        \"type+\",\r\n        \"type-\",\r\n        \"type\",\r\n        \"vtype+\",\r\n        \"vtype-\",\r\n        \"vtype\",\r\n        \"vt@ype+\",\r\n        \"vt@ype-\",\r\n        \"vt@ype\",\r\n        \"viewt@ype+\",\r\n        \"viewt@ype-\",\r\n        \"viewt@ype\",\r\n        \"viewtype+\",\r\n        \"viewtype-\",\r\n        \"viewtype\",\r\n        \"prop+\",\r\n        \"prop-\",\r\n        \"prop\",\r\n        \"type+\",\r\n        \"type-\",\r\n        \"type\",\r\n        \"t@ype\",\r\n        \"t@ype+\",\r\n        \"t@ype-\",\r\n        \"abst@ype\",\r\n        \"abstype\",\r\n        \"absviewt@ype\",\r\n        \"absvt@ype\",\r\n        \"for*\",\r\n        \"for\",\r\n        \"while*\",\r\n        \"while\"\r\n    ],\r\n    keywords_types: [\r\n        'bool',\r\n        'double',\r\n        'byte',\r\n        'int',\r\n        'short',\r\n        'char',\r\n        'void',\r\n        'unit',\r\n        'long',\r\n        'float',\r\n        'string',\r\n        'strptr'\r\n    ],\r\n    // TODO: reference for this?\r\n    keywords_effects: [\r\n        \"0\",\r\n        \"fun\",\r\n        \"clo\",\r\n        \"prf\",\r\n        \"funclo\",\r\n        \"cloptr\",\r\n        \"cloref\",\r\n        \"ref\",\r\n        \"ntm\",\r\n        \"1\" // all effects\r\n    ],\r\n    operators: [\r\n        \"@\",\r\n        \"!\",\r\n        \"|\",\r\n        \"`\",\r\n        \":\",\r\n        \"$\",\r\n        \".\",\r\n        \"=\",\r\n        \"#\",\r\n        \"~\",\r\n        //\r\n        \"..\",\r\n        \"...\",\r\n        //\r\n        \"=>\",\r\n        // \"=<\", // T_EQLT\r\n        \"=<>\",\r\n        \"=/=>\",\r\n        \"=>>\",\r\n        \"=/=>>\",\r\n        //\r\n        \"<\",\r\n        \">\",\r\n        //\r\n        \"><\",\r\n        //\r\n        \".<\",\r\n        \">.\",\r\n        //\r\n        \".<>.\",\r\n        //\r\n        \"->\",\r\n        //\"-<\", // T_MINUSLT\r\n        \"-<>\",\r\n    ],\r\n    brackets: [\r\n        { open: ',(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '`(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '%(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '\\'(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '\\'{', close: '}', token: 'delimiter.parenthesis' },\r\n        { open: '@(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '@{', close: '}', token: 'delimiter.brace' },\r\n        { open: '@[', close: ']', token: 'delimiter.square' },\r\n        { open: '#[', close: ']', token: 'delimiter.square' },\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.square' },\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '<', close: '>', token: 'delimiter.angle' }\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n    IDENTFST: /[a-zA-Z_]/,\r\n    IDENTRST: /[a-zA-Z0-9_'$]/,\r\n    symbolic: /[%&+-./:=@~`^|*!$#?<>]/,\r\n    digit: /[0-9]/,\r\n    digitseq0: /@digit*/,\r\n    xdigit: /[0-9A-Za-z]/,\r\n    xdigitseq0: /@xdigit*/,\r\n    INTSP: /[lLuU]/,\r\n    FLOATSP: /[fFlL]/,\r\n    fexponent: /[eE][+-]?[0-9]+/,\r\n    fexponent_bin: /[pP][+-]?[0-9]+/,\r\n    deciexp: /\\.[0-9]*@fexponent?/,\r\n    hexiexp: /\\.[0-9a-zA-Z]*@fexponent_bin?/,\r\n    irregular_keywords: /val[+-]?|case[+-]?|addr\\@?|fold\\@|free\\@|fix\\@?|lam\\@?|llam\\@?|prop[+-]?|type[+-]?|view[+-@]?|viewt@?ype[+-]?|t@?ype[+-]?|v(iew)?t@?ype[+-]?|abst@?ype|absv(iew)?t@?ype|for\\*?|while\\*?/,\r\n    ESCHAR: /[ntvbrfa\\\\\\?'\"\\(\\[\\{]/,\r\n    start: 'root',\r\n    // The main tokenizer for ATS/Postiats\r\n    // reference: https://github.com/githwxi/ATS-Postiats/blob/master/src/pats_lexing.dats\r\n    tokenizer: {\r\n        root: [\r\n            // lexing_blankseq0\r\n            { regex: /[ \\t\\r\\n]+/, action: { token: '' } },\r\n            // NOTE: (*) is an invalid ML-like comment!\r\n            { regex: /\\(\\*\\)/, action: { token: 'invalid' } },\r\n            { regex: /\\(\\*/, action: { token: 'comment', next: 'lexing_COMMENT_block_ml' } },\r\n            { regex: /\\(/, action: '@brackets' /*{ token: 'delimiter.parenthesis' }*/ },\r\n            { regex: /\\)/, action: '@brackets' /*{ token: 'delimiter.parenthesis' }*/ },\r\n            { regex: /\\[/, action: '@brackets' /*{ token: 'delimiter.bracket' }*/ },\r\n            { regex: /\\]/, action: '@brackets' /*{ token: 'delimiter.bracket' }*/ },\r\n            { regex: /\\{/, action: '@brackets' /*{ token: 'delimiter.brace' }*/ },\r\n            { regex: /\\}/, action: '@brackets' /*{ token: 'delimiter.brace' }*/ },\r\n            // lexing_COMMA\r\n            { regex: /,\\(/, action: '@brackets' /*{ token: 'delimiter.parenthesis' }*/ },\r\n            { regex: /,/, action: { token: 'delimiter.comma' } },\r\n            { regex: /;/, action: { token: 'delimiter.semicolon' } },\r\n            // lexing_AT\r\n            { regex: /@\\(/, action: '@brackets' /* { token: 'delimiter.parenthesis' }*/ },\r\n            { regex: /@\\[/, action: '@brackets' /* { token: 'delimiter.bracket' }*/ },\r\n            { regex: /@\\{/, action: '@brackets' /*{ token: 'delimiter.brace' }*/ },\r\n            // lexing_COLON\r\n            { regex: /:</, action: { token: 'keyword', next: '@lexing_EFFECT_commaseq0' } },\r\n            /*\r\n            lexing_DOT:\r\n\r\n            . // SYMBOLIC => lexing_IDENT_sym\r\n            . FLOATDOT => lexing_FLOAT_deciexp\r\n            . DIGIT => T_DOTINT\r\n            */\r\n            { regex: /\\.@symbolic+/, action: { token: 'identifier.sym' } },\r\n            // FLOATDOT case\r\n            { regex: /\\.@digit*@fexponent@FLOATSP*/, action: { token: 'number.float' } },\r\n            { regex: /\\.@digit+/, action: { token: 'number.float' } },\r\n            // lexing_DOLLAR:\r\n            // '$' IDENTFST IDENTRST* => lexing_IDENT_dlr, _ => lexing_IDENT_sym\r\n            {\r\n                regex: /\\$@IDENTFST@IDENTRST*/,\r\n                action: {\r\n                    cases: {\r\n                        '@keywords_dlr': { token: 'keyword.dlr' },\r\n                        '@default': { token: 'namespace' },\r\n                    }\r\n                }\r\n            },\r\n            // lexing_SHARP:\r\n            // '#' IDENTFST IDENTRST* => lexing_ident_srp, _ => lexing_IDENT_sym\r\n            {\r\n                regex: /\\#@IDENTFST@IDENTRST*/,\r\n                action: {\r\n                    cases: {\r\n                        '@keywords_srp': { token: 'keyword.srp' },\r\n                        '@default': { token: 'identifier' },\r\n                    }\r\n                }\r\n            },\r\n            // lexing_PERCENT:\r\n            { regex: /%\\(/, action: { token: 'delimiter.parenthesis' } },\r\n            { regex: /^%{(#|\\^|\\$)?/, action: { token: 'keyword', next: '@lexing_EXTCODE', nextEmbedded: 'text/javascript' } },\r\n            { regex: /^%}/, action: { token: 'keyword' } },\r\n            // lexing_QUOTE\r\n            { regex: /'\\(/, action: { token: 'delimiter.parenthesis' } },\r\n            { regex: /'\\[/, action: { token: 'delimiter.bracket' } },\r\n            { regex: /'\\{/, action: { token: 'delimiter.brace' } },\r\n            [/(')(\\\\@ESCHAR|\\\\[xX]@xdigit+|\\\\@digit+)(')/, ['string', 'string.escape', 'string']],\r\n            [/'[^\\\\']'/, 'string'],\r\n            // lexing_DQUOTE\r\n            [/\"/, 'string.quote', '@lexing_DQUOTE'],\r\n            // lexing_BQUOTE\r\n            { regex: /`\\(/, action: '@brackets' /* { token: 'delimiter.parenthesis' }*/ },\r\n            // TODO: otherwise, try lexing_IDENT_sym\r\n            { regex: /\\\\/, action: { token: 'punctuation' } },\r\n            // lexing_IDENT_alp:\r\n            // NOTE: (?!regex) is syntax for \"not-followed-by\" regex\r\n            // to resolve ambiguity such as foreach$fwork being incorrectly lexed as [for] [each$fwork]!\r\n            { regex: /@irregular_keywords(?!@IDENTRST)/, action: { token: 'keyword' } },\r\n            {\r\n                regex: /@IDENTFST@IDENTRST*[<!\\[]?/,\r\n                action: {\r\n                    cases: {\r\n                        // TODO: dynload and staload should be specially parsed\r\n                        // dynload whitespace+ \"special_string\"\r\n                        // this special string is really:\r\n                        //  '/' '\\\\' '.' => punctuation\r\n                        // ({\\$)([a-zA-Z_][a-zA-Z_0-9]*)(}) => punctuation,keyword,punctuation\r\n                        // [^\"] => identifier/literal\r\n                        '@keywords': { token: 'keyword' },\r\n                        '@keywords_types': { token: 'type' },\r\n                        '@default': { token: 'identifier' }\r\n                    }\r\n                }\r\n            },\r\n            // lexing_IDENT_sym:\r\n            { regex: /\\/\\/\\/\\//, action: { token: 'comment', next: '@lexing_COMMENT_rest' } },\r\n            { regex: /\\/\\/.*$/, action: { token: 'comment' } },\r\n            { regex: /\\/\\*/, action: { token: 'comment', next: '@lexing_COMMENT_block_c' } },\r\n            // AS-20160627: specifically for effect annotations\r\n            { regex: /-<|=</, action: { token: 'keyword', next: '@lexing_EFFECT_commaseq0' } },\r\n            {\r\n                regex: /@symbolic+/,\r\n                action: {\r\n                    cases: {\r\n                        '@operators': 'keyword',\r\n                        '@default': 'operator'\r\n                    }\r\n                }\r\n            },\r\n            // lexing_ZERO:\r\n            // FIXME: this one is quite messy/unfinished yet\r\n            // TODO: lexing_INT_hex\r\n            // - testing_hexiexp => lexing_FLOAT_hexiexp\r\n            // - testing_fexponent_bin => lexing_FLOAT_hexiexp\r\n            // - testing_intspseq0 => T_INT_hex\r\n            // lexing_INT_hex:\r\n            { regex: /0[xX]@xdigit+(@hexiexp|@fexponent_bin)@FLOATSP*/, action: { token: 'number.float' } },\r\n            { regex: /0[xX]@xdigit+@INTSP*/, action: { token: 'number.hex' } },\r\n            { regex: /0[0-7]+(?![0-9])@INTSP*/, action: { token: 'number.octal' } },\r\n            //{regex: /0/, action: { token: 'number' } }, // INTZERO\r\n            // lexing_INT_dec:\r\n            // - testing_deciexp => lexing_FLOAT_deciexp\r\n            // - testing_fexponent => lexing_FLOAT_deciexp\r\n            // - otherwise => intspseq0 ([0-9]*[lLuU]?)\r\n            { regex: /@digit+(@fexponent|@deciexp)@FLOATSP*/, action: { token: 'number.float' } },\r\n            { regex: /@digit@digitseq0@INTSP*/, action: { token: 'number.decimal' } },\r\n            // DIGIT, if followed by digitseq0, is lexing_INT_dec\r\n            { regex: /@digit+@INTSP*/, action: { token: 'number' } },\r\n        ],\r\n        lexing_COMMENT_block_ml: [\r\n            [/[^\\(\\*]+/, 'comment'],\r\n            [/\\(\\*/, 'comment', '@push'],\r\n            [/\\(\\*/, 'comment.invalid'],\r\n            [/\\*\\)/, 'comment', '@pop'],\r\n            [/\\*/, 'comment']\r\n        ],\r\n        lexing_COMMENT_block_c: [\r\n            [/[^\\/*]+/, 'comment'],\r\n            // [/\\/\\*/, 'comment', '@push' ],    // nested C-style block comments not allowed\r\n            // [/\\/\\*/,    'comment.invalid' ],\t// NOTE: this breaks block comments in the shape of /* //*/\r\n            [/\\*\\//, 'comment', '@pop'],\r\n            [/[\\/*]/, 'comment']\r\n        ],\r\n        lexing_COMMENT_rest: [\r\n            [/$/, 'comment', '@pop'],\r\n            [/.*/, 'comment']\r\n        ],\r\n        // NOTE: added by AS, specifically for highlighting\r\n        lexing_EFFECT_commaseq0: [\r\n            {\r\n                regex: /@IDENTFST@IDENTRST+|@digit+/,\r\n                action: {\r\n                    cases: {\r\n                        '@keywords_effects': { token: 'type.effect' },\r\n                        '@default': { token: 'identifier' }\r\n                    }\r\n                }\r\n            },\r\n            { regex: /,/, action: { token: 'punctuation' } },\r\n            { regex: />/, action: { token: '@rematch', next: '@pop' } },\r\n        ],\r\n        lexing_EXTCODE: [\r\n            { regex: /^%}/, action: { token: '@rematch', next: '@pop', nextEmbedded: '@pop' } },\r\n            { regex: /[^%]+/, action: '' },\r\n        ],\r\n        lexing_DQUOTE: [\r\n            { regex: /\"/, action: { token: 'string.quote', next: '@pop' } },\r\n            // AS-20160628: additional hi-lighting for variables in staload/dynload strings\r\n            { regex: /(\\{\\$)(@IDENTFST@IDENTRST*)(\\})/, action: [{ token: 'string.escape' }, { token: 'identifier' }, { token: 'string.escape' }] },\r\n            { regex: /\\\\$/, action: { token: 'string.escape' } },\r\n            { regex: /\\\\(@ESCHAR|[xX]@xdigit+|@digit+)/, action: { token: 'string.escape' } },\r\n            { regex: /[^\\\\\"]+/, action: { token: 'string' } }\r\n        ],\r\n    },\r\n};\r\n"],"sourceRoot":"webpack:///","file":"postiats-js-es5.js"}