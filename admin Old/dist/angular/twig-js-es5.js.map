{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/twig/twig.js"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\$\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\s]+)/g,\r\n    comments: {\r\n        blockComment: ['{#', '#}'],\r\n    },\r\n    brackets: [\r\n        ['{#', '#}'],\r\n        ['{%', '%}'],\r\n        ['{{', '}}'],\r\n        ['(', ')'],\r\n        ['[', ']'],\r\n        // HTML\r\n        ['<!--', '-->'],\r\n        ['<', '>'],\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{# ', close: ' #}' },\r\n        { open: '{% ', close: ' %}' },\r\n        { open: '{{ ', close: ' }}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n        // HTML\r\n        { open: '<', close: '>' },\r\n    ],\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '',\r\n    ignoreCase: true,\r\n    keywords: [\r\n        // (opening) tags\r\n        'apply', 'autoescape', 'block', 'deprecated', 'do', 'embed', 'extends',\r\n        'flush', 'for', 'from', 'if', 'import', 'include', 'macro', 'sandbox',\r\n        'set', 'use', 'verbatim', 'with',\r\n        // closing tags\r\n        'endapply', 'endautoescape', 'endblock', 'endembed', 'endfor', 'endif',\r\n        'endmacro', 'endsandbox', 'endset', 'endwith',\r\n        // literals\r\n        'true', 'false',\r\n    ],\r\n    tokenizer: {\r\n        root: [\r\n            // whitespace\r\n            [/\\s+/],\r\n            // Twig Tag Delimiters\r\n            [/{#/, 'comment.twig', '@commentState'],\r\n            [/{%[-~]?/, 'delimiter.twig', '@blockState'],\r\n            [/{{[-~]?/, 'delimiter.twig', '@variableState'],\r\n            // HTML\r\n            [/<!DOCTYPE/, 'metatag.html', '@doctype'],\r\n            [/<!--/, 'comment.html', '@comment'],\r\n            [/(<)((?:[\\w\\-]+:)?[\\w\\-]+)(\\s*)(\\/>)/, ['delimiter.html', 'tag.html', '', 'delimiter.html']],\r\n            [/(<)(script)/, ['delimiter.html', { token: 'tag.html', next: '@script' }]],\r\n            [/(<)(style)/, ['delimiter.html', { token: 'tag.html', next: '@style' }]],\r\n            [/(<)((?:[\\w\\-]+:)?[\\w\\-]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\r\n            [/(<\\/)((?:[\\w\\-]+:)?[\\w\\-]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\r\n            [/</, 'delimiter.html'],\r\n            [/[^<]+/],\r\n        ],\r\n        /**\r\n         * Comment Tag Handling\r\n         */\r\n        commentState: [\r\n            [/#}/, 'comment.twig', '@pop'],\r\n            [/./, 'comment.twig'],\r\n        ],\r\n        /**\r\n         * Block Tag Handling\r\n         */\r\n        blockState: [\r\n            [/[-~]?%}/, 'delimiter.twig', '@pop'],\r\n            // whitespace\r\n            [/\\s+/],\r\n            // verbatim\r\n            // Unlike other blocks, verbatim ehas its own state\r\n            // transition to ensure we mark its contents as strings.\r\n            [/(verbatim)(\\s*)([-~]?%})/, [\r\n                    'keyword.twig',\r\n                    '',\r\n                    { token: 'delimiter.twig', next: '@rawDataState' },\r\n                ]],\r\n            { include: 'expression' }\r\n        ],\r\n        rawDataState: [\r\n            // endverbatim\r\n            [/({%[-~]?)(\\s*)(endverbatim)(\\s*)([-~]?%})/, [\r\n                    'delimiter.twig',\r\n                    '',\r\n                    'keyword.twig',\r\n                    '',\r\n                    { token: 'delimiter.twig', next: '@popall' },\r\n                ]],\r\n            [/./, 'string.twig'],\r\n        ],\r\n        /**\r\n         * Variable Tag Handling\r\n         */\r\n        variableState: [\r\n            [/[-~]?}}/, 'delimiter.twig', '@pop'],\r\n            { include: 'expression' },\r\n        ],\r\n        stringState: [\r\n            // closing double quoted string\r\n            [/\"/, 'string.twig', '@pop'],\r\n            // interpolation start\r\n            [/#{\\s*/, 'string.twig', '@interpolationState'],\r\n            // string part\r\n            [/[^#\"\\\\]*(?:(?:\\\\.|#(?!\\{))[^#\"\\\\]*)*/, 'string.twig'],\r\n        ],\r\n        interpolationState: [\r\n            // interpolation end\r\n            [/}/, 'string.twig', '@pop'],\r\n            { include: 'expression' },\r\n        ],\r\n        /**\r\n         * Expression Handling\r\n         */\r\n        expression: [\r\n            // whitespace\r\n            [/\\s+/],\r\n            // operators - math\r\n            [/\\+|-|\\/{1,2}|%|\\*{1,2}/, 'operators.twig'],\r\n            // operators - logic\r\n            [/(and|or|not|b-and|b-xor|b-or)(\\s+)/, ['operators.twig', '']],\r\n            // operators - comparison (symbols)\r\n            [/==|!=|<|>|>=|<=/, 'operators.twig'],\r\n            // operators - comparison (words)\r\n            [/(starts with|ends with|matches)(\\s+)/, ['operators.twig', '']],\r\n            // operators - containment\r\n            [/(in)(\\s+)/, ['operators.twig', '']],\r\n            // operators - test\r\n            [/(is)(\\s+)/, ['operators.twig', '']],\r\n            // operators - misc\r\n            [/\\||~|:|\\.{1,2}|\\?{1,2}/, 'operators.twig'],\r\n            // names\r\n            [/[^\\W\\d][\\w]*/, {\r\n                    cases: {\r\n                        '@keywords': 'keyword.twig',\r\n                        '@default': 'variable.twig'\r\n                    }\r\n                }],\r\n            // numbers\r\n            [/\\d+(\\.\\d+)?/, 'number.twig'],\r\n            // punctuation\r\n            [/\\(|\\)|\\[|\\]|{|}|,/, 'delimiter.twig'],\r\n            // strings\r\n            [/\"([^#\"\\\\]*(?:\\\\.[^#\"\\\\]*)*)\"|\\'([^\\'\\\\]*(?:\\\\.[^\\'\\\\]*)*)\\'/, 'string.twig'],\r\n            // opening double quoted string\r\n            [/\"/, 'string.twig', '@stringState'],\r\n            // misc syntactic constructs\r\n            // These are not operators per se, but for the purposes of lexical analysis we\r\n            // can treat them as such.\r\n            // arrow functions\r\n            [/=>/, 'operators.twig'],\r\n            // assignment\r\n            [/=/, 'operators.twig'],\r\n        ],\r\n        /**\r\n         * HTML\r\n         */\r\n        doctype: [\r\n            [/[^>]+/, 'metatag.content.html'],\r\n            [/>/, 'metatag.html', '@pop'],\r\n        ],\r\n        comment: [\r\n            [/-->/, 'comment.html', '@pop'],\r\n            [/[^-]+/, 'comment.content.html'],\r\n            [/./, 'comment.content.html']\r\n        ],\r\n        otherTag: [\r\n            [/\\/?>/, 'delimiter.html', '@pop'],\r\n            [/\"([^\"]*)\"/, 'attribute.value.html'],\r\n            [/'([^']*)'/, 'attribute.value.html'],\r\n            [/[\\w\\-]+/, 'attribute.name.html'],\r\n            [/=/, 'delimiter.html'],\r\n            [/[ \\t\\r\\n]+/],\r\n        ],\r\n        // -- BEGIN <script> tags handling\r\n        // After <script\r\n        script: [\r\n            [/type/, 'attribute.name.html', '@scriptAfterType'],\r\n            [/\"([^\"]*)\"/, 'attribute.value.html'],\r\n            [/'([^']*)'/, 'attribute.value.html'],\r\n            [/[\\w\\-]+/, 'attribute.name.html'],\r\n            [/=/, 'delimiter.html'],\r\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded', nextEmbedded: 'text/javascript' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/(<\\/)(script\\s*)(>)/, ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]]\r\n        ],\r\n        // After <script ... type\r\n        scriptAfterType: [\r\n            [/=/, 'delimiter.html', '@scriptAfterTypeEquals'],\r\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded', nextEmbedded: 'text/javascript' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <script ... type =\r\n        scriptAfterTypeEquals: [\r\n            [/\"([^\"]*)\"/, { token: 'attribute.value.html', switchTo: '@scriptWithCustomType.$1' }],\r\n            [/'([^']*)'/, { token: 'attribute.value.html', switchTo: '@scriptWithCustomType.$1' }],\r\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded', nextEmbedded: 'text/javascript' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <script ... type = $S2\r\n        scriptWithCustomType: [\r\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.$S2', nextEmbedded: '$S2' }],\r\n            [/\"([^\"]*)\"/, 'attribute.value.html'],\r\n            [/'([^']*)'/, 'attribute.value.html'],\r\n            [/[\\w\\-]+/, 'attribute.name.html'],\r\n            [/=/, 'delimiter.html'],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        scriptEmbedded: [\r\n            [/<\\/script/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],\r\n            [/[^<]+/, '']\r\n        ],\r\n        // -- END <script> tags handling\r\n        // -- BEGIN <style> tags handling\r\n        // After <style\r\n        style: [\r\n            [/type/, 'attribute.name.html', '@styleAfterType'],\r\n            [/\"([^\"]*)\"/, 'attribute.value.html'],\r\n            [/'([^']*)'/, 'attribute.value.html'],\r\n            [/[\\w\\-]+/, 'attribute.name.html'],\r\n            [/=/, 'delimiter.html'],\r\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded', nextEmbedded: 'text/css' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/(<\\/)(style\\s*)(>)/, ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]]\r\n        ],\r\n        // After <style ... type\r\n        styleAfterType: [\r\n            [/=/, 'delimiter.html', '@styleAfterTypeEquals'],\r\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded', nextEmbedded: 'text/css' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <style ... type =\r\n        styleAfterTypeEquals: [\r\n            [/\"([^\"]*)\"/, { token: 'attribute.value.html', switchTo: '@styleWithCustomType.$1' }],\r\n            [/'([^']*)'/, { token: 'attribute.value.html', switchTo: '@styleWithCustomType.$1' }],\r\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded', nextEmbedded: 'text/css' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <style ... type = $S2\r\n        styleWithCustomType: [\r\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded.$S2', nextEmbedded: '$S2' }],\r\n            [/\"([^\"]*)\"/, 'attribute.value.html'],\r\n            [/'([^']*)'/, 'attribute.value.html'],\r\n            [/[\\w\\-]+/, 'attribute.name.html'],\r\n            [/=/, 'delimiter.html'],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        styleEmbedded: [\r\n            [/<\\/style/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],\r\n            [/[^<]+/, '']\r\n        ],\r\n    }\r\n};\r\n"],"sourceRoot":"webpack:///","file":"twig-js-es5.js"}