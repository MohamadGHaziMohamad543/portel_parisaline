{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/pascal/pascal.js"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    // the default separators except `@$`\r\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['{', '}'],\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')'],\r\n        ['<', '>'],\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '<', close: '>' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '<', close: '>' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp(\"^\\\\s*\\\\{\\\\$REGION(\\\\s\\\\'.*\\\\')?\\\\}\"),\r\n            end: new RegExp(\"^\\\\s*\\\\{\\\\$ENDREGION\\\\}\")\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.pascal',\r\n    ignoreCase: true,\r\n    brackets: [\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.square' },\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '<', close: '>', token: 'delimiter.angle' }\r\n    ],\r\n    keywords: [\r\n        'absolute', 'abstract', 'all', 'and_then', 'array', 'as', 'asm',\r\n        'attribute', 'begin', 'bindable', 'case', 'class', 'const',\r\n        'contains', 'default', 'div', 'else', 'end', 'except',\r\n        'exports', 'external', 'far', 'file', 'finalization', 'finally',\r\n        'forward', 'generic', 'goto', 'if', 'implements', 'import', 'in',\r\n        'index', 'inherited', 'initialization', 'interrupt', 'is', 'label',\r\n        'library', 'mod', 'module', 'name', 'near', 'not', 'object', 'of',\r\n        'on', 'only', 'operator', 'or_else', 'otherwise', 'override',\r\n        'package', 'packed', 'pow', 'private', 'program', 'protected',\r\n        'public', 'published', 'interface', 'implementation', 'qualified',\r\n        'read', 'record', 'resident', 'requires', 'resourcestring',\r\n        'restricted', 'segment', 'set', 'shl', 'shr', 'specialize', 'stored',\r\n        'then', 'threadvar', 'to', 'try', 'type', 'unit', 'uses', 'var',\r\n        'view', 'virtual', 'dynamic', 'overload', 'reintroduce', 'with',\r\n        'write', 'xor', 'true', 'false', 'procedure', 'function',\r\n        'constructor', 'destructor', 'property', 'break', 'continue', 'exit',\r\n        'abort', 'while', 'do', 'for', 'raise', 'repeat', 'until'\r\n    ],\r\n    typeKeywords: [\r\n        'boolean', 'double', 'byte', 'integer', 'shortint', 'char',\r\n        'longint', 'float', 'string'\r\n    ],\r\n    operators: [\r\n        '=', '>', '<', '<=', '>=', '<>', ':', ':=', 'and', 'or',\r\n        '+', '-', '*', '/', '@', '&', '^', '%'\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><:@\\^&|+\\-*\\/\\^%]+/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            // identifiers and keywords\r\n            [/[a-zA-Z_][\\w]*/, {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword.$0' },\r\n                        '@default': 'identifier'\r\n                    }\r\n                }],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // delimiters and operators\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/[<>](?!@symbols)/, '@brackets'],\r\n            [/@symbols/, {\r\n                    cases: {\r\n                        '@operators': 'delimiter',\r\n                        '@default': ''\r\n                    }\r\n                }],\r\n            // numbers\r\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\r\n            [/\\$[0-9a-fA-F]{1,16}/, 'number.hex'],\r\n            [/\\d+/, 'number'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[;,.]/, 'delimiter'],\r\n            // strings\r\n            [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/'/, 'string', '@string'],\r\n            // characters\r\n            [/'[^\\\\']'/, 'string'],\r\n            [/'/, 'string.invalid'],\r\n            [/\\#\\d+/, 'string']\r\n        ],\r\n        comment: [\r\n            [/[^\\*\\}]+/, 'comment'],\r\n            //[/\\(\\*/,    'comment', '@push' ],    // nested comment  not allowed :-(\r\n            [/\\}/, 'comment', '@pop'],\r\n            [/[\\{]/, 'comment']\r\n        ],\r\n        string: [\r\n            [/[^\\\\']+/, 'string'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/'/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, 'white'],\r\n            [/\\{/, 'comment', '@comment'],\r\n            [/\\/\\/.*$/, 'comment'],\r\n        ],\r\n    },\r\n};\r\n"],"sourceRoot":"webpack:///","file":"pascal-js-es5.js"}