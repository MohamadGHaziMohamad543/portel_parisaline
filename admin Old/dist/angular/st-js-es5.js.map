{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/st/st.js"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['(*', '*)'],\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')'],\r\n        ['var', 'end_var'],\r\n        ['var_input', 'end_var'],\r\n        ['var_output', 'end_var'],\r\n        ['var_in_out', 'end_var'],\r\n        ['var_temp', 'end_var'],\r\n        ['var_global', 'end_var'],\r\n        ['var_access', 'end_var'],\r\n        ['var_external', 'end_var'],\r\n        ['type', 'end_type'],\r\n        ['struct', 'end_struct'],\r\n        ['program', 'end_program'],\r\n        ['function', 'end_function'],\r\n        ['function_block', 'end_function_block'],\r\n        ['action', 'end_action'],\r\n        ['step', 'end_step'],\r\n        ['initial_step', 'end_step'],\r\n        ['transaction', 'end_transaction'],\r\n        ['configuration', 'end_configuration'],\r\n        ['tcp', 'end_tcp'],\r\n        ['recource', 'end_recource'],\r\n        ['channel', 'end_channel'],\r\n        ['library', 'end_library'],\r\n        ['folder', 'end_folder'],\r\n        ['binaries', 'end_binaries'],\r\n        ['includes', 'end_includes'],\r\n        ['sources', 'end_sources']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '[', close: ']' },\r\n        { open: '{', close: '}' },\r\n        { open: '(', close: ')' },\r\n        { open: '/*', close: '*/' },\r\n        { open: '\\'', close: '\\'', notIn: ['string_sq'] },\r\n        { open: '\"', close: '\"', notIn: ['string_dq'] },\r\n        { open: 'var_input', close: 'end_var' },\r\n        { open: 'var_output', close: 'end_var' },\r\n        { open: 'var_in_out', close: 'end_var' },\r\n        { open: 'var_temp', close: 'end_var' },\r\n        { open: 'var_global', close: 'end_var' },\r\n        { open: 'var_access', close: 'end_var' },\r\n        { open: 'var_external', close: 'end_var' },\r\n        { open: 'type', close: 'end_type' },\r\n        { open: 'struct', close: 'end_struct' },\r\n        { open: 'program', close: 'end_program' },\r\n        { open: 'function', close: 'end_function' },\r\n        { open: 'function_block', close: 'end_function_block' },\r\n        { open: 'action', close: 'end_action' },\r\n        { open: 'step', close: 'end_step' },\r\n        { open: 'initial_step', close: 'end_step' },\r\n        { open: 'transaction', close: 'end_transaction' },\r\n        { open: 'configuration', close: 'end_configuration' },\r\n        { open: 'tcp', close: 'end_tcp' },\r\n        { open: 'recource', close: 'end_recource' },\r\n        { open: 'channel', close: 'end_channel' },\r\n        { open: 'library', close: 'end_library' },\r\n        { open: 'folder', close: 'end_folder' },\r\n        { open: 'binaries', close: 'end_binaries' },\r\n        { open: 'includes', close: 'end_includes' },\r\n        { open: 'sources', close: 'end_sources' }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n        { open: 'var', close: 'end_var' },\r\n        { open: 'var_input', close: 'end_var' },\r\n        { open: 'var_output', close: 'end_var' },\r\n        { open: 'var_in_out', close: 'end_var' },\r\n        { open: 'var_temp', close: 'end_var' },\r\n        { open: 'var_global', close: 'end_var' },\r\n        { open: 'var_access', close: 'end_var' },\r\n        { open: 'var_external', close: 'end_var' },\r\n        { open: 'type', close: 'end_type' },\r\n        { open: 'struct', close: 'end_struct' },\r\n        { open: 'program', close: 'end_program' },\r\n        { open: 'function', close: 'end_function' },\r\n        { open: 'function_block', close: 'end_function_block' },\r\n        { open: 'action', close: 'end_action' },\r\n        { open: 'step', close: 'end_step' },\r\n        { open: 'initial_step', close: 'end_step' },\r\n        { open: 'transaction', close: 'end_transaction' },\r\n        { open: 'configuration', close: 'end_configuration' },\r\n        { open: 'tcp', close: 'end_tcp' },\r\n        { open: 'recource', close: 'end_recource' },\r\n        { open: 'channel', close: 'end_channel' },\r\n        { open: 'library', close: 'end_library' },\r\n        { open: 'folder', close: 'end_folder' },\r\n        { open: 'binaries', close: 'end_binaries' },\r\n        { open: 'includes', close: 'end_includes' },\r\n        { open: 'sources', close: 'end_sources' }\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp(\"^\\\\s*#pragma\\\\s+region\\\\b\"),\r\n            end: new RegExp(\"^\\\\s*#pragma\\\\s+endregion\\\\b\")\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.st',\r\n    ignoreCase: true,\r\n    brackets: [\r\n        { token: 'delimiter.curly', open: '{', close: '}' },\r\n        { token: 'delimiter.parenthesis', open: '(', close: ')' },\r\n        { token: 'delimiter.square', open: '[', close: ']' }\r\n    ],\r\n    keywords: ['if', 'end_if', 'elsif', 'else', 'case', 'of', 'to', '__try', '__catch', '__finally',\r\n        'do', 'with', 'by', 'while', 'repeat', 'end_while', 'end_repeat', 'end_case',\r\n        'for', 'end_for', 'task', 'retain', 'non_retain', 'constant', 'with', 'at',\r\n        'exit', 'return', 'interval', 'priority', 'address', 'port', 'on_channel',\r\n        'then', 'iec', 'file', 'uses', 'version', 'packagetype', 'displayname',\r\n        'copyright', 'summary', 'vendor', 'common_source', 'from', 'extends'],\r\n    constant: ['false', 'true', 'null'],\r\n    defineKeywords: [\r\n        'var', 'var_input', 'var_output', 'var_in_out', 'var_temp', 'var_global',\r\n        'var_access', 'var_external', 'end_var',\r\n        'type', 'end_type', 'struct', 'end_struct', 'program', 'end_program',\r\n        'function', 'end_function', 'function_block', 'end_function_block',\r\n        'interface', 'end_interface', 'method', 'end_method',\r\n        'property', 'end_property', 'namespace', 'end_namespace',\r\n        'configuration', 'end_configuration', 'tcp', 'end_tcp', 'resource',\r\n        'end_resource', 'channel', 'end_channel', 'library', 'end_library',\r\n        'folder', 'end_folder', 'binaries', 'end_binaries', 'includes',\r\n        'end_includes', 'sources', 'end_sources',\r\n        'action', 'end_action', 'step', 'initial_step', 'end_step', 'transaction', 'end_transaction'\r\n    ],\r\n    typeKeywords: ['int', 'sint', 'dint', 'lint', 'usint', 'uint', 'udint', 'ulint',\r\n        'real', 'lreal', 'time', 'date', 'time_of_day', 'date_and_time', 'string',\r\n        'bool', 'byte', 'word', 'dword', 'array', 'pointer', 'lword'],\r\n    operators: ['=', '>', '<', ':', ':=', '<=', '>=', '<>', '&', '+', '-', '*', '**',\r\n        'MOD', '^', 'or', 'and', 'not', 'xor', 'abs', 'acos', 'asin', 'atan', 'cos',\r\n        'exp', 'expt', 'ln', 'log', 'sin', 'sqrt', 'tan', 'sel', 'max', 'min', 'limit',\r\n        'mux', 'shl', 'shr', 'rol', 'ror', 'indexof', 'sizeof', 'adr', 'adrinst',\r\n        'bitadr', 'is_valid', 'ref', 'ref_to'],\r\n    builtinVariables: [],\r\n    builtinFunctions: ['sr', 'rs', 'tp', 'ton', 'tof', 'eq', 'ge', 'le', 'lt',\r\n        'ne', 'round', 'trunc', 'ctd', 'сtu', 'ctud', 'r_trig', 'f_trig',\r\n        'move', 'concat', 'delete', 'find', 'insert', 'left', 'len', 'replace',\r\n        'right', 'rtc'],\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n    // C# style strings\r\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            [/(\\.\\.)/, 'delimiter'],\r\n            [/\\b(16#[0-9A-Fa-f\\_]*)+\\b/, 'number.hex'],\r\n            [/\\b(2#[01\\_]+)+\\b/, 'number.binary'],\r\n            [/\\b(8#[0-9\\_]*)+\\b/, 'number.octal'],\r\n            [/\\b\\d*\\.\\d+([eE][\\-+]?\\d+)?\\b/, 'number.float'],\r\n            [/\\b(L?REAL)#[0-9\\_\\.e]+\\b/, 'number.float'],\r\n            [/\\b(BYTE|(?:D|L)?WORD|U?(?:S|D|L)?INT)#[0-9\\_]+\\b/, 'number'],\r\n            [/\\d+/, 'number'],\r\n            [/\\b(T|DT|TOD)#[0-9:-_shmyd]+\\b/, 'tag'],\r\n            [/\\%(I|Q|M)(X|B|W|D|L)[0-9\\.]+/, 'tag'],\r\n            [/\\%(I|Q|M)[0-9\\.]*/, 'tag'],\r\n            [/\\b[A-Za-z]{1,6}#[0-9]+\\b/, 'tag'],\r\n            [/\\b(TO_|CTU_|CTD_|CTUD_|MUX_|SEL_)[A_Za-z]+\\b/, 'predefined'],\r\n            [/\\b[A_Za-z]+(_TO_)[A_Za-z]+\\b/, 'predefined'],\r\n            [/[;]/, 'delimiter'],\r\n            [/[.]/, { token: 'delimiter', next: '@params' }],\r\n            // identifiers and keywords\r\n            [/[a-zA-Z_]\\w*/, {\r\n                    cases: {\r\n                        '@operators': 'operators',\r\n                        '@keywords': 'keyword',\r\n                        '@typeKeywords': 'type',\r\n                        '@defineKeywords': 'variable',\r\n                        '@constant': 'constant',\r\n                        '@builtinVariables': 'predefined',\r\n                        '@builtinFunctions': 'predefined',\r\n                        '@default': 'identifier'\r\n                    }\r\n                }],\r\n            { include: '@whitespace' },\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/\"/, { token: 'string.quote', bracket: '@open', next: '@string_dq' }],\r\n            [/'/, { token: 'string.quote', bracket: '@open', next: '@string_sq' }],\r\n            [/'[^\\\\']'/, 'string'],\r\n            [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\r\n            [/'/, 'string.invalid']\r\n        ],\r\n        params: [\r\n            [/\\b[A-Za-z0-9_]+\\b(?=\\()/, { token: 'identifier', next: '@pop' }],\r\n            [/\\b[A-Za-z0-9_]+\\b/, 'variable.name', '@pop']\r\n        ],\r\n        comment: [\r\n            [/[^\\/*]+/, 'comment'],\r\n            [/\\/\\*/, 'comment', '@push'],\r\n            [\"\\\\*/\", 'comment', '@pop'],\r\n            [/[\\/*]/, 'comment']\r\n        ],\r\n        comment2: [\r\n            [/[^\\(*]+/, 'comment'],\r\n            [/\\(\\*/, 'comment', '@push'],\r\n            [\"\\\\*\\\\)\", 'comment', '@pop'],\r\n            [/[\\(*]/, 'comment']\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, 'white'],\r\n            [/\\/\\/.*$/, 'comment'],\r\n            [/\\/\\*/, 'comment', '@comment'],\r\n            [/\\(\\*/, 'comment', '@comment2'],\r\n        ],\r\n        string_dq: [\r\n            [/[^\\\\\"]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/\"/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\r\n        ],\r\n        string_sq: [\r\n            [/[^\\\\']+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/'/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\r\n        ]\r\n    }\r\n};\r\n"],"sourceRoot":"webpack:///","file":"st-js-es5.js"}