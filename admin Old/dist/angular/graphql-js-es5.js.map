{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/graphql/graphql.js"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '#'\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"\"\"', close: '\"\"\"', notIn: ['string', 'comment'] },\r\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"\"\"', close: '\"\"\"' },\r\n        { open: '\"', close: '\"' },\r\n    ],\r\n    folding: {\r\n        offSide: true\r\n    }\r\n};\r\nexport var language = {\r\n    // Set defaultToken to invalid to see what you do not tokenize yet\r\n    defaultToken: 'invalid',\r\n    tokenPostfix: '.gql',\r\n    keywords: [\r\n        'null', 'true', 'false',\r\n        'query', 'mutation', 'subscription',\r\n        'extend', 'schema', 'directive',\r\n        'scalar', 'type', 'interface', 'union', 'enum', 'input', 'implements',\r\n        'fragment', 'on',\r\n    ],\r\n    typeKeywords: ['Int', 'Float', 'String', 'Boolean', 'ID'],\r\n    directiveLocations: [\r\n        'SCHEMA', 'SCALAR', 'OBJECT', 'FIELD_DEFINITION', 'ARGUMENT_DEFINITION',\r\n        'INTERFACE', 'UNION', 'ENUM', 'ENUM_VALUE', 'INPUT_OBJECT', 'INPUT_FIELD_DEFINITION',\r\n        'QUERY', 'MUTATION', 'SUBSCRIPTION', 'FIELD', 'FRAGMENT_DEFINITION',\r\n        'FRAGMENT_SPREAD', 'INLINE_FRAGMENT', 'VARIABLE_DEFINITION',\r\n    ],\r\n    operators: ['=', '!', '?', ':', '&', '|'],\r\n    // we include these common regular expressions\r\n    symbols: /[=!?:&|]+/,\r\n    // https://facebook.github.io/graphql/draft/#sec-String-Value\r\n    escapes: /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9A-Fa-f]{4})/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            // fields and argument names\r\n            [\r\n                /[a-z_][\\w$]*/,\r\n                {\r\n                    cases: {\r\n                        '@keywords': 'keyword',\r\n                        '@default': 'key.identifier',\r\n                    },\r\n                },\r\n            ],\r\n            // identify typed input variables\r\n            [\r\n                /[$][\\w$]*/,\r\n                {\r\n                    cases: {\r\n                        '@keywords': 'keyword',\r\n                        '@default': 'argument.identifier',\r\n                    },\r\n                },\r\n            ],\r\n            // to show class names nicely\r\n            [\r\n                /[A-Z][\\w\\$]*/,\r\n                {\r\n                    cases: {\r\n                        '@typeKeywords': 'keyword',\r\n                        '@default': 'type.identifier',\r\n                    },\r\n                },\r\n            ],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // delimiters and operators\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [\r\n                /@symbols/,\r\n                { cases: { '@operators': 'operator', '@default': '' } },\r\n            ],\r\n            // @ annotations.\r\n            // As an example, we emit a debugging log message on these tokens.\r\n            // Note: message are supressed during the first load -- change some lines to see them.\r\n            [\r\n                /@\\s*[a-zA-Z_\\$][\\w\\$]*/,\r\n                { token: 'annotation', log: 'annotation token: $0' },\r\n            ],\r\n            // numbers\r\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\r\n            [/0[xX][0-9a-fA-F]+/, 'number.hex'],\r\n            [/\\d+/, 'number'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[;,.]/, 'delimiter'],\r\n            [/\"\"\"/,\r\n                { token: 'string', next: '@mlstring', nextEmbedded: 'markdown' }\r\n            ],\r\n            // strings\r\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/\"/, { token: 'string.quote', bracket: '@open', next: '@string' }],\r\n        ],\r\n        mlstring: [\r\n            [/[^\"]+/, 'string'],\r\n            ['\"\"\"', { token: 'string', next: '@pop', nextEmbedded: '@pop' }]\r\n        ],\r\n        string: [\r\n            [/[^\\\\\"]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/\"/, { token: 'string.quote', bracket: '@close', next: '@pop' }],\r\n        ],\r\n        whitespace: [[/[ \\t\\r\\n]+/, ''], [/#.*$/, 'comment']],\r\n    },\r\n};\r\n"],"sourceRoot":"webpack:///","file":"graphql-js-es5.js"}