{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/ruby/ruby.js"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,MAAA,EAAA,YAAA;AAAA,aAAA,IAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,UAAA,EAAA,YAAA;AAAA,aAAA,QAAA;AAAA,KAAA;AAAA;;;;;;AAKO,QAAA,IAAA,GAAA;AACP,MAAA,QAAA,EAAA;AACA,QAAA,WAAA,EAAA,GADA;AAEA,QAAA,YAAA,EAAA,CAAA,QAAA,EAAA,MAAA;AAFA,OADO;AAKP,MAAA,QAAA,EAAA,CACA,CAAA,GAAA,EAAA,GAAA,CADA,EAEA,CAAA,GAAA,EAAW,GAAX,CAFA,EAGA,CAAA,GAAA,EAAA,GAAA,CAHA,CALO;AAUP,MAAA,gBAAA,EAAA,CACA;AAAS,QAAA,IAAA,EAAA,GAAT;AAAkB,QAAA,KAAA,EAAA;AAAlB,OADA,EAEA;AAAS,QAAA,IAAA,EAAA,GAAT;AAAS,QAAA,KAAA,EAAA;AAAT,OAFA,EAGA;AAAS,QAAA,IAAA,EAAA,GAAT;AAAS,QAAA,KAAA,EAAA;AAAT,OAHA,EAIA;AAAS,QAAA,IAAA,EAAA,GAAT;AAAS,QAAA,KAAA,EAAA;AAAT,OAJA,EAKA;AAAS,QAAA,IAAA,EAAA,IAAT;AAAS,QAAA,KAAA,EAAA;AAAT,OALA,CAVO;AAiBP,MAAA,gBAAA,EAAA,CACA;AAAS,QAAA,IAAA,EAAA,GAAT;AAAkB,QAAA,KAAA,EAAA;AAAlB,OADA,EAEA;AAAS,QAAA,IAAA,EAAA,GAAT;AAAS,QAAA,KAAA,EAAA;AAAT,OAFA,EAGA;AAAS,QAAA,IAAA,EAAA,GAAT;AAAS,QAAA,KAAA,EAAA;AAAT,OAHA,EAIA;AAAS,QAAA,IAAA,EAAA,GAAT;AAAS,QAAA,KAAA,EAAA;AAAT,OAJA,EAKA;AAAS,QAAA,IAAA,EAAA,IAAT;AAAS,QAAA,KAAA,EAAA;AAAT,OALA,CAjBO;AAwBP,MAAA,gBAAA,EAAA;AACA,QAAA,qBAAA,EAAA,IAAA,MAAA,CAAA,0MAAA,CADA;AAEA,QAAA,qBAAA,EAAA,IAAA,MAAA,CAAA,0FAAA;AAFA;AAxBO,KAAA;AA6BP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDO,QAAA,QAAA,GAAA;AACP,MAAA,YAAA,EAAA,OADO;AAEP,MAAA,QAAA,EAAA,CACA,UADA,EACA,cADA,EACA,UADA,EACA,OADA,EACA,KADA,EACA,OADA,EACA,KADA,EACA,OADA,EAEA,OAFA,EAEA,MAFA,EAEA,OAFA,EAEA,KAFA,EAEA,UAFA,EAEA,IAFA,EAEA,MAFA,EAEA,OAFA,EAEA,KAFA,EAGA,QAHA,EAGA,KAHA,EAGA,OAHA,EAGA,IAHA,EAGA,IAHA,EAGA,QAHA,EAGA,MAHA,EAGA,KAHA,EAGA,KAHA,EAGA,IAHA,EAGA,MAHA,EAIA,QAJA,EAIA,OAJA,EAIA,QAJA,EAIA,MAJA,EAIA,OAJA,EAIA,MAJA,EAIA,MAJA,EAIA,OAJA,EAIA,QAJA,EAKA,OALA,EAKA,MALA,EAKA,OALA,EAKA,OALA,CAFO;AASP,MAAA,UAAA,EAAA,CACA,IADA,EACA,IADA,EACA,KADA,EACA,GADA,EACA,GADA,EACA,IADA,CATO;AAYP,MAAA,QAAA,EAAA,CACA,SADA,EACA,QADA,EACA,SADA,EACA,SADA,EACA,QADA,EACA,aADA,EAEA,WAFA,EAEA,sBAFA,EAEA,wBAFA,EAEA,KAFA,CAZO;AAgBP;AACA,MAAA,YAAA,EAAA,CACA,QADA,EACA,OADA,EACA,KADA,EACA,MADA,EACA,IADA,EACA,OADA,EACA,KADA,EACA,IADA,EACA,OADA,EACA,OADA,EACA,QADA,CAjBO;AAoBP,MAAA,SAAA,EAAA,CACA,KADA,EACA,MADA,EACA,IADA,EACA,OADA,EACA,KADA,EACA,IADA,EACA,OADA,EACA,OADA,EACA,QADA,CApBO;AAuBP,MAAA,SAAA,EAAA,CACA,GADA,EACA,GADA,EACA,GADA,EACA,KADA,EACA,IADA,EACA,KADA,EACA,IADA,EACA,IADA,EACA,GADA,EACA,IADA,EACA,GADA,EACA,IADA,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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '#',\r\n        blockComment: ['=begin', '=end'],\r\n    },\r\n    brackets: [\r\n        ['(', ')'],\r\n        ['{', '}'],\r\n        ['[', ']']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    indentationRules: {\r\n        increaseIndentPattern: new RegExp('^\\\\s*((begin|class|(private|protected)\\\\s+def|def|else|elsif|ensure|for|if|module|rescue|unless|until|when|while|case)|([^#]*\\\\sdo\\\\b)|([^#]*=\\\\s*(case|if|unless)))\\\\b([^#\\\\{;]|(\"|\\'|\\/).*\\\\4)*(#.*)?$'),\r\n        decreaseIndentPattern: new RegExp('^\\\\s*([}\\\\]]([,)]?\\\\s*(#|$)|\\\\.[a-zA-Z_]\\\\w*\\\\b)|(end|rescue|ensure|else|elsif|when)\\\\b)'),\r\n    }\r\n};\r\n/*\r\n * Ruby language definition\r\n *\r\n * Quite a complex language due to elaborate escape sequences\r\n * and quoting of literate strings/regular expressions, and\r\n * an 'end' keyword that does not always apply to modifiers like until and while,\r\n * and a 'do' keyword that sometimes starts a block, but sometimes is part of\r\n * another statement (like 'while').\r\n *\r\n * (1) end blocks:\r\n * 'end' may end declarations like if or until, but sometimes 'if' or 'until'\r\n * are modifiers where there is no 'end'. Also, 'do' sometimes starts a block\r\n * that is ended by 'end', but sometimes it is part of a 'while', 'for', or 'until'\r\n * To do proper brace matching we do some elaborate state manipulation.\r\n * some examples:\r\n *\r\n *   until bla do\r\n *     work until tired\r\n *     list.each do\r\n *       something if test\r\n *     end\r\n *   end\r\n *\r\n * or\r\n *\r\n * if test\r\n *  something (if test then x end)\r\n *  bar if bla\r\n * end\r\n *\r\n * or, how about using class as a property..\r\n *\r\n * class Test\r\n *   def endpoint\r\n *     self.class.endpoint || routes\r\n *   end\r\n * end\r\n *\r\n * (2) quoting:\r\n * there are many kinds of strings and escape sequences. But also, one can\r\n * start many string-like things as '%qx' where q specifies the kind of string\r\n * (like a command, escape expanded, regular expression, symbol etc.), and x is\r\n * some character and only another 'x' ends the sequence. Except for brackets\r\n * where the closing bracket ends the sequence.. and except for a nested bracket\r\n * inside the string like entity. Also, such strings can contain interpolated\r\n * ruby expressions again (and span multiple lines). Moreover, expanded\r\n * regular expression can also contain comments.\r\n */\r\nexport var language = {\r\n    tokenPostfix: '.ruby',\r\n    keywords: [\r\n        '__LINE__', '__ENCODING__', '__FILE__', 'BEGIN', 'END', 'alias', 'and', 'begin',\r\n        'break', 'case', 'class', 'def', 'defined?', 'do', 'else', 'elsif', 'end',\r\n        'ensure', 'for', 'false', 'if', 'in', 'module', 'next', 'nil', 'not', 'or', 'redo',\r\n        'rescue', 'retry', 'return', 'self', 'super', 'then', 'true', 'undef', 'unless',\r\n        'until', 'when', 'while', 'yield',\r\n    ],\r\n    keywordops: [\r\n        '::', '..', '...', '?', ':', '=>'\r\n    ],\r\n    builtins: [\r\n        'require', 'public', 'private', 'include', 'extend', 'attr_reader',\r\n        'protected', 'private_class_method', 'protected_class_method', 'new'\r\n    ],\r\n    // these are closed by 'end' (if, while and until are handled separately)\r\n    declarations: [\r\n        'module', 'class', 'def', 'case', 'do', 'begin', 'for', 'if', 'while', 'until', 'unless'\r\n    ],\r\n    linedecls: [\r\n        'def', 'case', 'do', 'begin', 'for', 'if', 'while', 'until', 'unless'\r\n    ],\r\n    operators: [\r\n        '^', '&', '|', '<=>', '==', '===', '!~', '=~', '>', '>=', '<', '<=', '<<', '>>', '+',\r\n        '-', '*', '/', '%', '**', '~', '+@', '-@', '[]', '[]=', '`',\r\n        '+=', '-=', '*=', '**=', '/=', '^=', '%=', '<<=', '>>=', '&=', '&&=', '||=', '|='\r\n    ],\r\n    brackets: [\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.square' }\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?:&|+\\-*\\/\\^%\\.]+/,\r\n    // escape sequences\r\n    escape: /(?:[abefnrstv\\\\\"'\\n\\r]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4})/,\r\n    escapes: /\\\\(?:C\\-(@escape|.)|c(@escape|.)|@escape)/,\r\n    decpart: /\\d(_?\\d)*/,\r\n    decimal: /0|@decpart/,\r\n    delim: /[^a-zA-Z0-9\\s\\n\\r]/,\r\n    heredelim: /(?:\\w+|'[^']*'|\"[^\"]*\"|`[^`]*`)/,\r\n    regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\r\n    regexpesc: /\\\\(?:[AzZbBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})?/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        // Main entry.\r\n        // root.<decl> where decl is the current opening declaration (like 'class')\r\n        root: [\r\n            // identifiers and keywords\r\n            // most complexity here is due to matching 'end' correctly with declarations.\r\n            // We distinguish a declaration that comes first on a line, versus declarations further on a line (which are most likey modifiers)\r\n            [/^(\\s*)([a-z_]\\w*[!?=]?)/, ['white',\r\n                    {\r\n                        cases: {\r\n                            'for|until|while': { token: 'keyword.$2', next: '@dodecl.$2' },\r\n                            '@declarations': { token: 'keyword.$2', next: '@root.$2' },\r\n                            'end': { token: 'keyword.$S2', next: '@pop' },\r\n                            '@keywords': 'keyword',\r\n                            '@builtins': 'predefined',\r\n                            '@default': 'identifier'\r\n                        }\r\n                    }]],\r\n            [/[a-z_]\\w*[!?=]?/,\r\n                {\r\n                    cases: {\r\n                        'if|unless|while|until': { token: 'keyword.$0x', next: '@modifier.$0x' },\r\n                        'for': { token: 'keyword.$2', next: '@dodecl.$2' },\r\n                        '@linedecls': { token: 'keyword.$0', next: '@root.$0' },\r\n                        'end': { token: 'keyword.$S2', next: '@pop' },\r\n                        '@keywords': 'keyword',\r\n                        '@builtins': 'predefined',\r\n                        '@default': 'identifier'\r\n                    }\r\n                }],\r\n            [/[A-Z][\\w]*[!?=]?/, 'constructor.identifier'],\r\n            [/\\$[\\w]*/, 'global.constant'],\r\n            [/@[\\w]*/, 'namespace.instance.identifier'],\r\n            [/@@[\\w]*/, 'namespace.class.identifier'],\r\n            // here document\r\n            [/<<[-~](@heredelim).*/, { token: 'string.heredoc.delimiter', next: '@heredoc.$1' }],\r\n            [/[ \\t\\r\\n]+<<(@heredelim).*/, { token: 'string.heredoc.delimiter', next: '@heredoc.$1' }],\r\n            [/^<<(@heredelim).*/, { token: 'string.heredoc.delimiter', next: '@heredoc.$1' }],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // strings\r\n            [/\"/, { token: 'string.d.delim', next: '@dstring.d.\"' }],\r\n            [/'/, { token: 'string.sq.delim', next: '@sstring.sq' }],\r\n            // % literals. For efficiency, rematch in the 'pstring' state\r\n            [/%([rsqxwW]|Q?)/, { token: '@rematch', next: 'pstring' }],\r\n            // commands and symbols\r\n            [/`/, { token: 'string.x.delim', next: '@dstring.x.`' }],\r\n            [/:(\\w|[$@])\\w*[!?=]?/, 'string.s'],\r\n            [/:\"/, { token: 'string.s.delim', next: '@dstring.s.\"' }],\r\n            [/:'/, { token: 'string.s.delim', next: '@sstring.s' }],\r\n            // regular expressions. Lookahead for a (not escaped) closing forwardslash on the same line\r\n            [/\\/(?=(\\\\\\/|[^\\/\\n])+\\/)/, { token: 'regexp.delim', next: '@regexp' }],\r\n            // delimiters and operators\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/@symbols/, {\r\n                    cases: {\r\n                        '@keywordops': 'keyword',\r\n                        '@operators': 'operator',\r\n                        '@default': ''\r\n                    }\r\n                }],\r\n            [/[;,]/, 'delimiter'],\r\n            // numbers\r\n            [/0[xX][0-9a-fA-F](_?[0-9a-fA-F])*/, 'number.hex'],\r\n            [/0[_oO][0-7](_?[0-7])*/, 'number.octal'],\r\n            [/0[bB][01](_?[01])*/, 'number.binary'],\r\n            [/0[dD]@decpart/, 'number'],\r\n            [/@decimal((\\.@decpart)?([eE][\\-+]?@decpart)?)/, {\r\n                    cases: {\r\n                        '$1': 'number.float',\r\n                        '@default': 'number'\r\n                    }\r\n                }],\r\n        ],\r\n        // used to not treat a 'do' as a block opener if it occurs on the same\r\n        // line as a 'do' statement: 'while|until|for'\r\n        // dodecl.<decl> where decl is the declarations started, like 'while'\r\n        dodecl: [\r\n            [/^/, { token: '', switchTo: '@root.$S2' }],\r\n            [/[a-z_]\\w*[!?=]?/, {\r\n                    cases: {\r\n                        'end': { token: 'keyword.$S2', next: '@pop' },\r\n                        'do': { token: 'keyword', switchTo: '@root.$S2' },\r\n                        '@linedecls': { token: '@rematch', switchTo: '@root.$S2' },\r\n                        '@keywords': 'keyword',\r\n                        '@builtins': 'predefined',\r\n                        '@default': 'identifier'\r\n                    }\r\n                }],\r\n            { include: '@root' }\r\n        ],\r\n        // used to prevent potential modifiers ('if|until|while|unless') to match\r\n        // with 'end' keywords.\r\n        // modifier.<decl>x where decl is the declaration starter, like 'if'\r\n        modifier: [\r\n            [/^/, '', '@pop'],\r\n            [/[a-z_]\\w*[!?=]?/, {\r\n                    cases: {\r\n                        'end': { token: 'keyword.$S2', next: '@pop' },\r\n                        'then|else|elsif|do': { token: 'keyword', switchTo: '@root.$S2' },\r\n                        '@linedecls': { token: '@rematch', switchTo: '@root.$S2' },\r\n                        '@keywords': 'keyword',\r\n                        '@builtins': 'predefined',\r\n                        '@default': 'identifier'\r\n                    }\r\n                }],\r\n            { include: '@root' }\r\n        ],\r\n        // single quote strings (also used for symbols)\r\n        // sstring.<kind>  where kind is 'sq' (single quote) or 's' (symbol)\r\n        sstring: [\r\n            [/[^\\\\']+/, 'string.$S2'],\r\n            [/\\\\\\\\|\\\\'|\\\\$/, 'string.$S2.escape'],\r\n            [/\\\\./, 'string.$S2.invalid'],\r\n            [/'/, { token: 'string.$S2.delim', next: '@pop' }]\r\n        ],\r\n        // double quoted \"string\".\r\n        // dstring.<kind>.<delim> where kind is 'd' (double quoted), 'x' (command), or 's' (symbol)\r\n        // and delim is the ending delimiter (\" or `)\r\n        dstring: [\r\n            [/[^\\\\`\"#]+/, 'string.$S2'],\r\n            [/#/, 'string.$S2.escape', '@interpolated'],\r\n            [/\\\\$/, 'string.$S2.escape'],\r\n            [/@escapes/, 'string.$S2.escape'],\r\n            [/\\\\./, 'string.$S2.escape.invalid'],\r\n            [/[`\"]/, {\r\n                    cases: {\r\n                        '$#==$S3': { token: 'string.$S2.delim', next: '@pop' },\r\n                        '@default': 'string.$S2'\r\n                    }\r\n                }]\r\n        ],\r\n        // literal documents\r\n        // heredoc.<close> where close is the closing delimiter\r\n        heredoc: [\r\n            [/^(\\s*)(@heredelim)$/, {\r\n                    cases: {\r\n                        '$2==$S2': ['string.heredoc', { token: 'string.heredoc.delimiter', next: '@pop' }],\r\n                        '@default': ['string.heredoc', 'string.heredoc']\r\n                    }\r\n                }],\r\n            [/.*/, 'string.heredoc'],\r\n        ],\r\n        // interpolated sequence\r\n        interpolated: [\r\n            [/\\$\\w*/, 'global.constant', '@pop'],\r\n            [/@\\w*/, 'namespace.class.identifier', '@pop'],\r\n            [/@@\\w*/, 'namespace.instance.identifier', '@pop'],\r\n            [/[{]/, { token: 'string.escape.curly', switchTo: '@interpolated_compound' }],\r\n            ['', '', '@pop'],\r\n        ],\r\n        // any code\r\n        interpolated_compound: [\r\n            [/[}]/, { token: 'string.escape.curly', next: '@pop' }],\r\n            { include: '@root' },\r\n        ],\r\n        // %r quoted regexp\r\n        // pregexp.<open>.<close> where open/close are the open/close delimiter\r\n        pregexp: [\r\n            { include: '@whitespace' },\r\n            // turns out that you can quote using regex control characters, aargh!\r\n            // for example; %r|kgjgaj| is ok (even though | is used for alternation)\r\n            // so, we need to match those first\r\n            [/[^\\(\\{\\[\\\\]/, {\r\n                    cases: {\r\n                        '$#==$S3': { token: 'regexp.delim', next: '@pop' },\r\n                        '$#==$S2': { token: 'regexp.delim', next: '@push' },\r\n                        '~[)}\\\\]]': '@brackets.regexp.escape.control',\r\n                        '~@regexpctl': 'regexp.escape.control',\r\n                        '@default': 'regexp'\r\n                    }\r\n                }],\r\n            { include: '@regexcontrol' },\r\n        ],\r\n        // We match regular expression quite precisely\r\n        regexp: [\r\n            { include: '@regexcontrol' },\r\n            [/[^\\\\\\/]/, 'regexp'],\r\n            ['/[ixmp]*', { token: 'regexp.delim' }, '@pop'],\r\n        ],\r\n        regexcontrol: [\r\n            [/(\\{)(\\d+(?:,\\d*)?)(\\})/, ['@brackets.regexp.escape.control', 'regexp.escape.control', '@brackets.regexp.escape.control']],\r\n            [/(\\[)(\\^?)/, ['@brackets.regexp.escape.control', { token: 'regexp.escape.control', next: '@regexrange' }]],\r\n            [/(\\()(\\?[:=!])/, ['@brackets.regexp.escape.control', 'regexp.escape.control']],\r\n            [/\\(\\?#/, { token: 'regexp.escape.control', next: '@regexpcomment' }],\r\n            [/[()]/, '@brackets.regexp.escape.control'],\r\n            [/@regexpctl/, 'regexp.escape.control'],\r\n            [/\\\\$/, 'regexp.escape'],\r\n            [/@regexpesc/, 'regexp.escape'],\r\n            [/\\\\\\./, 'regexp.invalid'],\r\n            [/#/, 'regexp.escape', '@interpolated'],\r\n        ],\r\n        regexrange: [\r\n            [/-/, 'regexp.escape.control'],\r\n            [/\\^/, 'regexp.invalid'],\r\n            [/\\\\$/, 'regexp.escape'],\r\n            [/@regexpesc/, 'regexp.escape'],\r\n            [/[^\\]]/, 'regexp'],\r\n            [/\\]/, '@brackets.regexp.escape.control', '@pop'],\r\n        ],\r\n        regexpcomment: [\r\n            [/[^)]+/, 'comment'],\r\n            [/\\)/, { token: 'regexp.escape.control', next: '@pop' }]\r\n        ],\r\n        // % quoted strings\r\n        // A bit repetitive since we need to often special case the kind of ending delimiter\r\n        pstring: [\r\n            [/%([qws])\\(/, { token: 'string.$1.delim', switchTo: '@qstring.$1.(.)' }],\r\n            [/%([qws])\\[/, { token: 'string.$1.delim', switchTo: '@qstring.$1.[.]' }],\r\n            [/%([qws])\\{/, { token: 'string.$1.delim', switchTo: '@qstring.$1.{.}' }],\r\n            [/%([qws])</, { token: 'string.$1.delim', switchTo: '@qstring.$1.<.>' }],\r\n            [/%([qws])(@delim)/, { token: 'string.$1.delim', switchTo: '@qstring.$1.$2.$2' }],\r\n            [/%r\\(/, { token: 'regexp.delim', switchTo: '@pregexp.(.)' }],\r\n            [/%r\\[/, { token: 'regexp.delim', switchTo: '@pregexp.[.]' }],\r\n            [/%r\\{/, { token: 'regexp.delim', switchTo: '@pregexp.{.}' }],\r\n            [/%r</, { token: 'regexp.delim', switchTo: '@pregexp.<.>' }],\r\n            [/%r(@delim)/, { token: 'regexp.delim', switchTo: '@pregexp.$1.$1' }],\r\n            [/%(x|W|Q?)\\(/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.(.)' }],\r\n            [/%(x|W|Q?)\\[/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.[.]' }],\r\n            [/%(x|W|Q?)\\{/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.{.}' }],\r\n            [/%(x|W|Q?)</, { token: 'string.$1.delim', switchTo: '@qqstring.$1.<.>' }],\r\n            [/%(x|W|Q?)(@delim)/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.$2.$2' }],\r\n            [/%([rqwsxW]|Q?)./, { token: 'invalid', next: '@pop' }],\r\n            [/./, { token: 'invalid', next: '@pop' }],\r\n        ],\r\n        // non-expanded quoted string.\r\n        // qstring.<kind>.<open>.<close>\r\n        //  kind = q|w|s  (single quote, array, symbol)\r\n        //  open = open delimiter\r\n        //  close = close delimiter\r\n        qstring: [\r\n            [/\\\\$/, 'string.$S2.escape'],\r\n            [/\\\\./, 'string.$S2.escape'],\r\n            [/./, {\r\n                    cases: {\r\n                        '$#==$S4': { token: 'string.$S2.delim', next: '@pop' },\r\n                        '$#==$S3': { token: 'string.$S2.delim', next: '@push' },\r\n                        '@default': 'string.$S2'\r\n                    }\r\n                }],\r\n        ],\r\n        // expanded quoted string.\r\n        // qqstring.<kind>.<open>.<close>\r\n        //  kind = Q|W|x  (double quote, array, command)\r\n        //  open = open delimiter\r\n        //  close = close delimiter\r\n        qqstring: [\r\n            [/#/, 'string.$S2.escape', '@interpolated'],\r\n            { include: '@qstring' }\r\n        ],\r\n        // whitespace & comments\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [/^\\s*=begin\\b/, 'comment', '@comment'],\r\n            [/#.*$/, 'comment'],\r\n        ],\r\n        comment: [\r\n            [/[^=]+/, 'comment'],\r\n            [/^\\s*=begin\\b/, 'comment.invalid'],\r\n            [/^\\s*=end\\b.*/, 'comment', '@pop'],\r\n            [/[=]/, 'comment']\r\n        ],\r\n    }\r\n};\r\n"],"sourceRoot":"webpack:///","file":"ruby-js-es5.js"}