{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/yaml/yaml.js"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,MAAA,EAAA,YAAA;AAAA,aAAA,IAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,UAAA,EAAA,YAAA;AAAA,aAAA,QAAA;AAAA,KAAA;;AAAO,QAAA,IAAA,GAAA;AACP,MAAA,QAAA,EAAA;AACA,QAAA,WAAA,EAAA;AADA,OADO;AAIP,MAAA,QAAA,EAAA,CACA,CAAA,GAAA,EAAW,GAAX,CADA,EAEA,CAAA,GAAA,EAAA,GAAA,CAFA,EAGA,CAAA,GAAA,EAAA,GAAA,CAHA,CAJO;AASP,MAAA,gBAAA,EAAA,CACA;AAAS,QAAA,IAAA,EAAA,GAAT;AAAkB,QAAA,KAAA,EAAA;AAAlB,OADA,EAEA;AAAS,QAAA,IAAA,EAAA,GAAT;AAAS,QAAA,KAAA,EAAA;AAAT,OAFA,EAGA;AAAS,QAAA,IAAA,EAAA,GAAT;AAAS,QAAA,KAAA,EAAA;AAAT,OAHA,EAIA;AAAS,QAAA,IAAA,EAAA,GAAT;AAAS,QAAA,KAAA,EAAA;AAAT,OAJA,EAKA;AAAS,QAAA,IAAA,EAAA,IAAT;AAAS,QAAA,KAAA,EAAA;AAAT,OALA,CATO;AAgBP,MAAA,gBAAA,EAAA,CACA;AAAS,QAAA,IAAA,EAAA,GAAT;AAAkB,QAAA,KAAA,EAAA;AAAlB,OADA,EAEA;AAAS,QAAA,IAAA,EAAA,GAAT;AAAS,QAAA,KAAA,EAAA;AAAT,OAFA,EAGA;AAAS,QAAA,IAAA,EAAA,GAAT;AAAS,QAAA,KAAA,EAAA;AAAT,OAHA,EAIA;AAAS,QAAA,IAAA,EAAA,GAAT;AAAS,QAAA,KAAA,EAAA;AAAT,OAJA,EAKA;AAAS,QAAA,IAAA,EAAA,IAAT;AAAS,QAAA,KAAA,EAAA;AAAT,OALA,CAhBO;AAuBP,MAAA,OAAA,EAAA;AACA,QAAA,OAAA,EAAA;AADA;AAvBO,KAAA;AA2BA,QAAA,QAAA,GAAA;AACP,MAAA,YAAA,EAAA,OADO;AAEP,MAAA,QAAA,EAAA,CACA;AAAS,QAAA,KAAA,EAAA,mBAAT;AAAS,QAAA,IAAA,EAAA,GAAT;AAA8C,QAAA,KAAA,EAAA;AAA9C,OADA,EAEA;AAAS,QAAA,KAAA,EAAA,kBAAT;AAAS,QAAA,IAAA,EAAA,GAAT;AAAS,QAAA,KAAA,EAAA;AAAT,OAFA,CAFO;AAMP,MAAA,QAAA,EAAA,CAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,GAAA,CANO;AAOP,MAAA,aAAA,EAAA,mBAPO;AAQP,MAAA,WAAA,EAAA,qDARO;AASP,MAAA,WAAA,EAAA,UATO;AAUP,MAAA,SAAA,EAAA,gBAVO;AAWP,MAAA,cAAA,EAAA,wBAXO;AAYP,MAAA,SAAA,EAAA,mBAZO;AAaP,MAAA,UAAA,EAAA,yEAbO;AAcP,MAAA,OAAA,EAAA,6CAdO;AAeP,MAAA,SAAA,EAAA;AACA,QAAA,IAAA,EAAA,CACA;AAAa,UAAA,OAAA,EAAA;AAAb,SADA,EAEA;AAAa,UAAA,OAAA,EAAA;AAAb,SAFA,EAGA;AACA,SAAA,WAAA,EAAA,gBAAA,CAJA,EAKA;AACA,SAAA,KAAA,EAAA,yBAAA,CANA,EAOA,CAAA,OAAA,EAAmB,uBAAnB,CAPA,EAQA;AACA,SAAA,YAAA,EAAA,WAAA,CATA,EAUA;AAAa,UAAA,OAAA,EAAA;AAAb,SAVA,EAWA;AAAa,UAAA,OAAA,EAAA;AAAb,SAXA,EAYA;AAAa,UAAA,OAAA,EAAA;AAAb,SAZA,EAaA;AAAa,UAAA,OAAA,EAAA;AAAb,SAbA,EAcA;AACA,SAAA,6BAAA,EAAA,QAAA,CAfA,EAgBA,CAAA,2BAAA,EAAA,cAAA,CAhBA,EAiBA,CAAA,2BAAA,EAAA,cAAA,CAjBA,EAkBA,CAAA,yBAAA,EAAA,YAAA,CAlBA,EAmBA,CAAA,8BAAA,EAAA,iBAAA,CAnBA,EAoBA,CAAA,yBAAA,EAAA,YAAA,CApBA,EAqBA,CAAA,0BAAA,EAAA,aAAA,CArBA,EAsBA;AACA,SAAA,mCAAA,EAAA,CAAA,MAAA,EAAA,OAAA,EAAA,WAAA,EAAA,OAAA,CAAA,CAvBA,EAwBA;AAAa,UAAA,OAAA,EAAA;AAAb,SAxBA,EAyBA;AACA,SAAA,KAAA,EAAA;AACA,UAAA,KAAA,EAAA;AACA,yBAAA,SADA;AAEA,wBAAA;AAFA;AADA,SAAA,CA1BA,CADA;AAkCA;AACA,QAAA,MAAA,EAAA,CACA;AAAa,UAAA,OAAA,EAAA;AAAb,SADA,EAEA;AAAa,UAAA,OAAA,EAAA;AAAb,SAFA,EAGA;AACA,SAAA,IAAA,EAAgB,WAAhB,EAAgB,MAAhB,CAJA,EAKA;AACA,SAAA,GAAA,EAAA,iBAAA,CANA,EAOA;AACA,SAAA,QAAA,EAAA,WAAA,CARA,EASA;AACA,SAAA,kCAAA,EAAkC,MAAlC,CAVA,EAWA;AACA;AAAa,UAAA,OAAA,EAAA;AAAb,SAZA,EAaA;AAAa,UAAA,OAAA,EAAA;AAAb,SAbA,EAcA;AACA;AAAa,UAAA,OAAA,EAAA;AAAb,SAfA,EAgBA;AAAa,UAAA,OAAA,EAAA;AAAb,SAhBA,EAiBA;AAAa,UAAA,OAAA,EAAA;AAAb,SAjBA,EAkBA;AACA,SAAA,SAAA,EAAkB;AAClB,UAAA,KAAA,EAAA;AACA,yBAAA,SADA;AAEA,wBAAA;AAFA;AADkB,SAAlB,CAnBA,CAnCA;AA6DA;AACA,QAAA,KAAA,EAAA,CACA;AAAa,UAAA,OAAA,EAAA;AAAb,SADA,EAEA;AAAa,UAAA,OAAA,EAAA;AAAb,SAFA,EAGA;AACA,SAAA,IAAA,EAAA,WAAA,EAAA,MAAA,CAJA,EAKA;AACA,SAAA,GAAA,EAAA,iBAAA,CANA,EAOA;AACA;AAAa,UAAA,OAAA,EAAA;AAAb,SARA,EASA;AAAa,UAAA,OAAA,EAAA;AAAb,SATA,EAUA;AACA;AAAa,UAAA,OAAA,EAAA;AAAb,SAXA,EAYA;AAAa,UAAA,OAAA,EAAA;AAAb,SAZA,EAaA;AAAa,UAAA,OAAA,EAAA;AAAb,SAbA,EAcA;AACA,SAAA,SAAA,EAAA;AACA,UAAA,KAAA,EAAA;AACA,yBAAA,SADA;AAEA,wBAAA;AAFA;AADA,SAAA,CAfA,CA9DA;AAoFA;AACA,QAAA,WAAA,EAAA,CACA,CAAA,UAAA,EAAA,QAAA,EAAA,0BAAA,CADA,CArFA;AAwFA;AACA;AACA,QAAA,oBAAA,EAAA,CACA,CAAA,UAAA,EAAA;AACA,UAAA,KAAA,EAAA;AACA,uBAAA,QADA;AAEA,wBAAA;AAAqC,cAAA,KAAA,EAAA,UAArC;AAAqC,cAAA,IAAA,EAAA;AAArC;AAFA;AADA,SAAA,CADA,CA1FA;AAkGA,QAAA,UAAA,EAAA,CACA,CAAA,YAAA,EAAA,OAAA,CADA,CAlGA;AAqGA;AACA,QAAA,OAAA,EAAA,CACA,CAAA,MAAA,EAAA,SAAA,CADA,CAtGA;AAyGA;AACA,QAAA,eAAA,EAAA,CACA,CAAA,IAAA,EAAA,WAAA,EAAA,QAAA,CADA,EAEA,CAAA,IAAA,EAAgB,WAAhB,EAAgB,SAAhB,CAFA,CA1GA;AA8GA;AACA,QAAA,WAAA,EAAA,CACA,CAAA,iBAAA,EAAA,gBAAA,CADA,EAEA,CAAA,iBAAA,EAAA,gBAAA,CAFA,EAGA,CAAA,SAAA,EAAA,QAAA,CAHA,EAIA,CAAA,GAAA,EAAA,QAAA,EAAA,qBAAA,CAJA,CA/GA;AAqHA,QAAA,kBAAA,EAAA,CACA,CAAA,SAAA,EAAA,QAAA,CADA,EAEA,CAAA,UAAA,EAAA,eAAA,CAFA,EAGA,CAAA,KAAA,EAAA,uBAAA,CAHA,EAIA,CAAA,GAAA,EAAA,QAAA,EAAA,MAAA,CAJA,CArHA;AA2HA;AACA,QAAA,UAAA,EAAA,CACA,CAAA,kBAAA,EAAA,WAAA,EAAA,cAAA,CADA,CA5HA;AA+HA;AACA,QAAA,UAAA,EAAA,CACA,CAAA,iCAAA,EAA2C,QAA3C,CADA,EAEA,CAAA,+BAAA,EAAyC,cAAzC,CAFA,EAGA,CAAA,+BAAA,EAAyC,cAAzC,CAHA,EAIA,CAAA,6BAAA,EAAuC,YAAvC,CAJA,EAKA,CAAA,kCAAA,EAA4C,iBAA5C,CALA,EAMA,CAAA,6BAAA,EAAuC,YAAvC,CANA,EAOA,CAAA,8BAAA,EAAwC,aAAxC,CAPA,CAhIA;AAyIA,QAAA,SAAA,EAAA,CACA,CAAA,SAAA,EAAA,KAAA,CADA,CAzIA;AA4IA,QAAA,MAAA,EAAA,CACA,CAAA,WAAA,EAAA,WAAA,CADA;AA5IA;AAfO,KAAA","sourcesContent":["export var conf = {\r\n    comments: {\r\n        lineComment: '#'\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    folding: {\r\n        offSide: true\r\n    }\r\n};\r\nexport var language = {\r\n    tokenPostfix: '.yaml',\r\n    brackets: [\r\n        { token: 'delimiter.bracket', open: '{', close: '}' },\r\n        { token: 'delimiter.square', open: '[', close: ']' }\r\n    ],\r\n    keywords: ['true', 'True', 'TRUE', 'false', 'False', 'FALSE', 'null', 'Null', 'Null', '~'],\r\n    numberInteger: /(?:0|[+-]?[0-9]+)/,\r\n    numberFloat: /(?:0|[+-]?[0-9]+)(?:\\.[0-9]+)?(?:e[-+][1-9][0-9]*)?/,\r\n    numberOctal: /0o[0-7]+/,\r\n    numberHex: /0x[0-9a-fA-F]+/,\r\n    numberInfinity: /[+-]?\\.(?:inf|Inf|INF)/,\r\n    numberNaN: /\\.(?:nan|Nan|NAN)/,\r\n    numberDate: /\\d{4}-\\d\\d-\\d\\d([Tt ]\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(( ?[+-]\\d\\d?(:\\d\\d)?)|Z)?)?/,\r\n    escapes: /\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,\r\n    tokenizer: {\r\n        root: [\r\n            { include: '@whitespace' },\r\n            { include: '@comment' },\r\n            // Directive\r\n            [/%[^ ]+.*$/, 'meta.directive'],\r\n            // Document Markers\r\n            [/---/, 'operators.directivesEnd'],\r\n            [/\\.{3}/, 'operators.documentEnd'],\r\n            // Block Structure Indicators\r\n            [/[-?:](?= )/, 'operators'],\r\n            { include: '@anchor' },\r\n            { include: '@tagHandle' },\r\n            { include: '@flowCollections' },\r\n            { include: '@blockStyle' },\r\n            // Numbers\r\n            [/@numberInteger(?![ \\t]*\\S+)/, 'number'],\r\n            [/@numberFloat(?![ \\t]*\\S+)/, 'number.float'],\r\n            [/@numberOctal(?![ \\t]*\\S+)/, 'number.octal'],\r\n            [/@numberHex(?![ \\t]*\\S+)/, 'number.hex'],\r\n            [/@numberInfinity(?![ \\t]*\\S+)/, 'number.infinity'],\r\n            [/@numberNaN(?![ \\t]*\\S+)/, 'number.nan'],\r\n            [/@numberDate(?![ \\t]*\\S+)/, 'number.date'],\r\n            // Key:Value pair\r\n            [/(\".*?\"|'.*?'|.*?)([ \\t]*)(:)( |$)/, ['type', 'white', 'operators', 'white']],\r\n            { include: '@flowScalars' },\r\n            // String nodes\r\n            [/.+$/, {\r\n                    cases: {\r\n                        '@keywords': 'keyword',\r\n                        '@default': 'string'\r\n                    }\r\n                }]\r\n        ],\r\n        // Flow Collection: Flow Mapping\r\n        object: [\r\n            { include: '@whitespace' },\r\n            { include: '@comment' },\r\n            // Flow Mapping termination\r\n            [/\\}/, '@brackets', '@pop'],\r\n            // Flow Mapping delimiter\r\n            [/,/, 'delimiter.comma'],\r\n            // Flow Mapping Key:Value delimiter\r\n            [/:(?= )/, 'operators'],\r\n            // Flow Mapping Key:Value key\r\n            [/(?:\".*?\"|'.*?'|[^,\\{\\[]+?)(?=: )/, 'type'],\r\n            // Start Flow Style\r\n            { include: '@flowCollections' },\r\n            { include: '@flowScalars' },\r\n            // Scalar Data types\r\n            { include: '@tagHandle' },\r\n            { include: '@anchor' },\r\n            { include: '@flowNumber' },\r\n            // Other value (keyword or string)\r\n            [/[^\\},]+/, {\r\n                    cases: {\r\n                        '@keywords': 'keyword',\r\n                        '@default': 'string'\r\n                    }\r\n                }]\r\n        ],\r\n        // Flow Collection: Flow Sequence\r\n        array: [\r\n            { include: '@whitespace' },\r\n            { include: '@comment' },\r\n            // Flow Sequence termination\r\n            [/\\]/, '@brackets', '@pop'],\r\n            // Flow Sequence delimiter\r\n            [/,/, 'delimiter.comma'],\r\n            // Start Flow Style\r\n            { include: '@flowCollections' },\r\n            { include: '@flowScalars' },\r\n            // Scalar Data types\r\n            { include: '@tagHandle' },\r\n            { include: '@anchor' },\r\n            { include: '@flowNumber' },\r\n            // Other value (keyword or string)\r\n            [/[^\\],]+/, {\r\n                    cases: {\r\n                        '@keywords': 'keyword',\r\n                        '@default': 'string'\r\n                    }\r\n                }]\r\n        ],\r\n        // First line of a Block Style\r\n        multiString: [\r\n            [/^( +).+$/, 'string', '@multiStringContinued.$1']\r\n        ],\r\n        // Further lines of a Block Style\r\n        //   Workaround for indentation detection\r\n        multiStringContinued: [\r\n            [/^( *).+$/, {\r\n                    cases: {\r\n                        '$1==$S2': 'string',\r\n                        '@default': { token: '@rematch', next: '@popall' }\r\n                    }\r\n                }]\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, 'white']\r\n        ],\r\n        // Only line comments\r\n        comment: [\r\n            [/#.*$/, 'comment']\r\n        ],\r\n        // Start Flow Collections\r\n        flowCollections: [\r\n            [/\\[/, '@brackets', '@array'],\r\n            [/\\{/, '@brackets', '@object']\r\n        ],\r\n        // Start Flow Scalars (quoted strings)\r\n        flowScalars: [\r\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/'[^']*'/, 'string'],\r\n            [/\"/, 'string', '@doubleQuotedString']\r\n        ],\r\n        doubleQuotedString: [\r\n            [/[^\\\\\"]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/\"/, 'string', '@pop']\r\n        ],\r\n        // Start Block Scalar\r\n        blockStyle: [\r\n            [/[>|][0-9]*[+-]?$/, 'operators', '@multiString']\r\n        ],\r\n        // Numbers in Flow Collections (terminate with ,]})\r\n        flowNumber: [\r\n            [/@numberInteger(?=[ \\t]*[,\\]\\}])/, 'number'],\r\n            [/@numberFloat(?=[ \\t]*[,\\]\\}])/, 'number.float'],\r\n            [/@numberOctal(?=[ \\t]*[,\\]\\}])/, 'number.octal'],\r\n            [/@numberHex(?=[ \\t]*[,\\]\\}])/, 'number.hex'],\r\n            [/@numberInfinity(?=[ \\t]*[,\\]\\}])/, 'number.infinity'],\r\n            [/@numberNaN(?=[ \\t]*[,\\]\\}])/, 'number.nan'],\r\n            [/@numberDate(?=[ \\t]*[,\\]\\}])/, 'number.date']\r\n        ],\r\n        tagHandle: [\r\n            [/\\![^ ]*/, 'tag']\r\n        ],\r\n        anchor: [\r\n            [/[&*][^ ]+/, 'namespace']\r\n        ]\r\n    }\r\n};\r\n"],"sourceRoot":"webpack:///","file":"yaml-js-es5.js"}