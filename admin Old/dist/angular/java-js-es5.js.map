{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/java/java.js"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    // the default separators except `@$`\r\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['/*', '*/'],\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')'],\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n        { open: '<', close: '>' },\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp(\"^\\\\s*//\\\\s*(?:(?:#?region\\\\b)|(?:<editor-fold\\\\b))\"),\r\n            end: new RegExp(\"^\\\\s*//\\\\s*(?:(?:#?endregion\\\\b)|(?:</editor-fold>))\")\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.java',\r\n    keywords: [\r\n        'abstract', 'continue', 'for', 'new', 'switch', 'assert', 'default',\r\n        'goto', 'package', 'synchronized', 'boolean', 'do', 'if', 'private',\r\n        'this', 'break', 'double', 'implements', 'protected', 'throw', 'byte',\r\n        'else', 'import', 'public', 'throws', 'case', 'enum', 'instanceof', 'return',\r\n        'transient', 'catch', 'extends', 'int', 'short', 'try', 'char', 'final',\r\n        'interface', 'static', 'void', 'class', 'finally', 'long', 'strictfp',\r\n        'volatile', 'const', 'float', 'native', 'super', 'while', 'true', 'false'\r\n    ],\r\n    operators: [\r\n        '=', '>', '<', '!', '~', '?', ':',\r\n        '==', '<=', '>=', '!=', '&&', '||', '++', '--',\r\n        '+', '-', '*', '/', '&', '|', '^', '%', '<<',\r\n        '>>', '>>>', '+=', '-=', '*=', '/=', '&=', '|=',\r\n        '^=', '%=', '<<=', '>>=', '>>>='\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n    digits: /\\d+(_+\\d+)*/,\r\n    octaldigits: /[0-7]+(_+[0-7]+)*/,\r\n    binarydigits: /[0-1]+(_+[0-1]+)*/,\r\n    hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            // identifiers and keywords\r\n            [/[a-zA-Z_$][\\w$]*/, {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword.$0' },\r\n                        '@default': 'identifier'\r\n                    }\r\n                }],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // delimiters and operators\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/[<>](?!@symbols)/, '@brackets'],\r\n            [/@symbols/, {\r\n                    cases: {\r\n                        '@operators': 'delimiter',\r\n                        '@default': ''\r\n                    }\r\n                }],\r\n            // @ annotations.\r\n            [/@\\s*[a-zA-Z_\\$][\\w\\$]*/, 'annotation'],\r\n            // numbers\r\n            [/(@digits)[eE]([\\-+]?(@digits))?[fFdD]?/, 'number.float'],\r\n            [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?[fFdD]?/, 'number.float'],\r\n            [/0[xX](@hexdigits)[Ll]?/, 'number.hex'],\r\n            [/0(@octaldigits)[Ll]?/, 'number.octal'],\r\n            [/0[bB](@binarydigits)[Ll]?/, 'number.binary'],\r\n            [/(@digits)[fFdD]/, 'number.float'],\r\n            [/(@digits)[lL]?/, 'number'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[;,.]/, 'delimiter'],\r\n            // strings\r\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/\"/, 'string', '@string'],\r\n            // characters\r\n            [/'[^\\\\']'/, 'string'],\r\n            [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\r\n            [/'/, 'string.invalid']\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@javadoc'],\r\n            [/\\/\\*/, 'comment', '@comment'],\r\n            [/\\/\\/.*$/, 'comment'],\r\n        ],\r\n        comment: [\r\n            [/[^\\/*]+/, 'comment'],\r\n            // [/\\/\\*/, 'comment', '@push' ],    // nested comment not allowed :-(\r\n            // [/\\/\\*/,    'comment.invalid' ],    // this breaks block comments in the shape of /* //*/\r\n            [/\\*\\//, 'comment', '@pop'],\r\n            [/[\\/*]/, 'comment']\r\n        ],\r\n        //Identical copy of comment above, except for the addition of .doc\r\n        javadoc: [\r\n            [/[^\\/*]+/, 'comment.doc'],\r\n            // [/\\/\\*/, 'comment.doc', '@push' ],    // nested comment not allowed :-(\r\n            [/\\/\\*/, 'comment.doc.invalid'],\r\n            [/\\*\\//, 'comment.doc', '@pop'],\r\n            [/[\\/*]/, 'comment.doc']\r\n        ],\r\n        string: [\r\n            [/[^\\\\\"]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/\"/, 'string', '@pop']\r\n        ],\r\n    },\r\n};\r\n"],"sourceRoot":"webpack:///","file":"java-js-es5.js"}