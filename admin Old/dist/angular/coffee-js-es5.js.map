{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/coffee/coffee.js"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#%\\^\\&\\*\\(\\)\\=\\$\\-\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\r\n    comments: {\r\n        blockComment: ['###', '###'],\r\n        lineComment: '#'\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp(\"^\\\\s*#region\\\\b\"),\r\n            end: new RegExp(\"^\\\\s*#endregion\\\\b\")\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    ignoreCase: true,\r\n    tokenPostfix: '.coffee',\r\n    brackets: [\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.square' },\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' }\r\n    ],\r\n    regEx: /\\/(?!\\/\\/)(?:[^\\/\\\\]|\\\\.)*\\/[igm]*/,\r\n    keywords: [\r\n        'and', 'or', 'is', 'isnt', 'not', 'on', 'yes', '@', 'no', 'off',\r\n        'true', 'false', 'null', 'this',\r\n        'new', 'delete', 'typeof', 'in', 'instanceof',\r\n        'return', 'throw', 'break', 'continue', 'debugger',\r\n        'if', 'else', 'switch', 'for', 'while', 'do', 'try', 'catch', 'finally',\r\n        'class', 'extends', 'super',\r\n        'undefined', 'then', 'unless', 'until', 'loop', 'of', 'by', 'when'\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?&%|+\\-*\\/\\^\\.,\\:]+/,\r\n    escapes: /\\\\(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            // identifiers and keywords\r\n            [/\\@[a-zA-Z_]\\w*/, 'variable.predefined'],\r\n            [/[a-zA-Z_]\\w*/, {\r\n                    cases: {\r\n                        'this': 'variable.predefined',\r\n                        '@keywords': { token: 'keyword.$0' },\r\n                        '@default': ''\r\n                    }\r\n                }],\r\n            // whitespace\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            // Comments\r\n            [/###/, 'comment', '@comment'],\r\n            [/#.*$/, 'comment'],\r\n            // regular expressions\r\n            ['///', { token: 'regexp', next: '@hereregexp' }],\r\n            [/^(\\s*)(@regEx)/, ['', 'regexp']],\r\n            [/(\\()(\\s*)(@regEx)/, ['@brackets', '', 'regexp']],\r\n            [/(\\,)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\=)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\:)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\[)(\\s*)(@regEx)/, ['@brackets', '', 'regexp']],\r\n            [/(\\!)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\&)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\|)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\?)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\{)(\\s*)(@regEx)/, ['@brackets', '', 'regexp']],\r\n            [/(\\;)(\\s*)(@regEx)/, ['', '', 'regexp']],\r\n            // delimiters\r\n            [/}/, {\r\n                    cases: {\r\n                        '$S2==interpolatedstring': { token: 'string', next: '@pop' },\r\n                        '@default': '@brackets'\r\n                    }\r\n                }],\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/@symbols/, 'delimiter'],\r\n            // numbers\r\n            [/\\d+[eE]([\\-+]?\\d+)?/, 'number.float'],\r\n            [/\\d+\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\r\n            [/0[xX][0-9a-fA-F]+/, 'number.hex'],\r\n            [/0[0-7]+(?!\\d)/, 'number.octal'],\r\n            [/\\d+/, 'number'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[,.]/, 'delimiter'],\r\n            // strings:\r\n            [/\"\"\"/, 'string', '@herestring.\"\"\"'],\r\n            [/'''/, 'string', '@herestring.\\'\\'\\''],\r\n            [/\"/, {\r\n                    cases: {\r\n                        '@eos': 'string',\r\n                        '@default': { token: 'string', next: '@string.\"' }\r\n                    }\r\n                }],\r\n            [/'/, {\r\n                    cases: {\r\n                        '@eos': 'string',\r\n                        '@default': { token: 'string', next: '@string.\\'' }\r\n                    }\r\n                }],\r\n        ],\r\n        string: [\r\n            [/[^\"'\\#\\\\]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\./, 'string.escape.invalid'],\r\n            [/\\./, 'string.escape.invalid'],\r\n            [/#{/, {\r\n                    cases: {\r\n                        '$S2==\"': { token: 'string', next: 'root.interpolatedstring' },\r\n                        '@default': 'string'\r\n                    }\r\n                }],\r\n            [/[\"']/, {\r\n                    cases: {\r\n                        '$#==$S2': { token: 'string', next: '@pop' },\r\n                        '@default': 'string'\r\n                    }\r\n                }],\r\n            [/#/, 'string']\r\n        ],\r\n        herestring: [\r\n            [/(\"\"\"|''')/, {\r\n                    cases: {\r\n                        '$1==$S2': { token: 'string', next: '@pop' },\r\n                        '@default': 'string'\r\n                    }\r\n                }],\r\n            [/[^#\\\\'\"]+/, 'string'],\r\n            [/['\"]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\./, 'string.escape.invalid'],\r\n            [/#{/, { token: 'string.quote', next: 'root.interpolatedstring' }],\r\n            [/#/, 'string']\r\n        ],\r\n        comment: [\r\n            [/[^#]+/, 'comment',],\r\n            [/###/, 'comment', '@pop'],\r\n            [/#/, 'comment'],\r\n        ],\r\n        hereregexp: [\r\n            [/[^\\\\\\/#]+/, 'regexp'],\r\n            [/\\\\./, 'regexp'],\r\n            [/#.*$/, 'comment'],\r\n            ['///[igm]*', { token: 'regexp', next: '@pop' }],\r\n            [/\\//, 'regexp'],\r\n        ],\r\n    },\r\n};\r\n"],"sourceRoot":"webpack:///","file":"coffee-js-es5.js"}